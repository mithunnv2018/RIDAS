/*
 * Created on 29 Feb 2016 ( Time 17:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.hibernate.internal.SessionImpl;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.supercsv.cellprocessor.ParseDate;
import org.supercsv.cellprocessor.ParseDouble;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;

import com.ridas.bean.TblReceiptMaster;
import com.ridas.bean.jpa.TblReceiptMasterEntity;
import com.ridas.business.service.TblReceiptMasterService;
import com.ridas.business.service.mapping.TblReceiptMasterServiceMapper;
import com.ridas.common.CommonUtil;
import com.ridas.persistence.PersistenceServiceProvider;
import com.ridas.persistence.services.TblReceiptMasterPersistence;
import com.ridas.web.common.AbstractController;

import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;

/**
 * Implementation of TblReceiptMasterService
 */
@Component
public class TblReceiptMasterServiceImpl implements TblReceiptMasterService {



	private TblReceiptMasterPersistence tblReceiptMasterPersistence;

	@Resource
	private TblReceiptMasterServiceMapper tblReceiptMasterServiceMapper;

	public TblReceiptMasterServiceImpl() {
		tblReceiptMasterPersistence = PersistenceServiceProvider.getService(TblReceiptMasterPersistence.class);
	}

	@Override
	public TblReceiptMaster findById(String receiptPk) {
		TblReceiptMasterEntity entity = tblReceiptMasterPersistence.load(receiptPk);
		return tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(entity);
	}

	@Override
	public List<TblReceiptMaster> findAll() {
		List<TblReceiptMasterEntity> entities = tblReceiptMasterPersistence.loadAll();
		List<TblReceiptMaster> beans = new ArrayList<TblReceiptMaster>();
		for (TblReceiptMasterEntity entity : entities) {
			String memberName = entity.getTblMembershipForm().getMemberName();
			System.out.println("memberName" + memberName);
			TblReceiptMaster tblReceiptMaster = tblReceiptMasterServiceMapper
					.mapTblReceiptMasterEntityToTblReceiptMaster(entity);
			tblReceiptMaster.setMemberName(memberName);
			// beans.add(tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(entity));
			beans.add(tblReceiptMaster);
		}
		System.out.println("Beans :" + beans.toString() + " size :" + beans.size());
		return beans;
	}

	@Override
	public TblReceiptMaster save(TblReceiptMaster tblReceiptMaster) {
		return update(tblReceiptMaster);
	}

	@Override
	public TblReceiptMaster create(TblReceiptMaster tblReceiptMaster) {
		if (tblReceiptMasterPersistence.load(tblReceiptMaster.getReceiptPk()) != null) {
			throw new IllegalStateException("already.exists");
		}
		tblReceiptMaster.setReceiptType("membership");
		TblReceiptMasterEntity tblReceiptMasterEntity = new TblReceiptMasterEntity();

		tblReceiptMasterServiceMapper.mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster,
				tblReceiptMasterEntity);

		TblReceiptMasterEntity tblReceiptMasterEntitySaved = tblReceiptMasterPersistence.save(tblReceiptMasterEntity);
		return tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntitySaved);
	}

	@Override
	public TblReceiptMaster update(TblReceiptMaster tblReceiptMaster) {
		TblReceiptMasterEntity tblReceiptMasterEntity = tblReceiptMasterPersistence
				.load(tblReceiptMaster.getReceiptPk());
		tblReceiptMasterServiceMapper.mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster,
				tblReceiptMasterEntity);
		TblReceiptMasterEntity tblReceiptMasterEntitySaved = tblReceiptMasterPersistence.save(tblReceiptMasterEntity);
		return tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntitySaved);
	}

	@Override
	public void delete(String receiptPk) {
		tblReceiptMasterPersistence.delete(receiptPk);
	}

	public TblReceiptMasterPersistence getTblReceiptMasterPersistence() {
		return tblReceiptMasterPersistence;
	}

	public void setTblReceiptMasterPersistence(TblReceiptMasterPersistence tblReceiptMasterPersistence) {
		this.tblReceiptMasterPersistence = tblReceiptMasterPersistence;
	}

	public TblReceiptMasterServiceMapper getTblReceiptMasterServiceMapper() {
		return tblReceiptMasterServiceMapper;
	}

	public void setTblReceiptMasterServiceMapper(TblReceiptMasterServiceMapper tblReceiptMasterServiceMapper) {
		this.tblReceiptMasterServiceMapper = tblReceiptMasterServiceMapper;
	}

	/**
	 * done as on 13 feb 2016 added for TblUserMaster for retrieving user
	 * details for login
	 */

	@Override
	public Boolean doImportExcelSpreadSheet(MultipartFile file) throws IOException {

		ICsvBeanReader beanReader = null;
		try {
			// done as on 22-feb-2016 code to remove unwanted fields from list

			beanReader = new CsvBeanReader(new InputStreamReader(file.getInputStream()),
					CsvPreference.STANDARD_PREFERENCE);
			final String[] header = beanReader.getHeader(true);
			final CellProcessor[] processors = new CellProcessor[] { new NotNull(), new ParseDouble(), new NotNull(),
					new NotNull(), new NotNull(), new ParseDate("MM/dd/yyyy")

					, new NotNull(), new NotNull(), new ParseDate("MM/dd/yyyy")

					, new NotNull(), new NotNull(), new NotNull(), new NotNull(), new NotNull(), new ParseDouble(),
					new ParseDouble(), new NotNull(), new ParseDate("MM/dd/yyyy")

					, new NotNull(), new NotNull()

			};

			TblReceiptMaster tblReceiptMaster = new TblReceiptMaster();
			while ((tblReceiptMaster = beanReader.read(TblReceiptMaster.class, header, processors)) != null) {

				// done as on 19 feb 2016 save primary key default to temp
				String DUMMY = "temp";

				tblReceiptMaster.setReceiptPk(DUMMY);

				create(tblReceiptMaster);
			}
		} finally {
			if (beanReader != null) {
				beanReader.close();
			}
		}
		return true;
	}
	
	@Override
	public List<TblReceiptMaster> findAllByRecType() {
		List<TblReceiptMasterEntity> findAllWhereClause = tblReceiptMasterPersistence.findAllByRecType();
		System.out.println("findAllWhereClause"+findAllWhereClause.toString());
		List<TblReceiptMaster> beans = new ArrayList<TblReceiptMaster>();
		for(TblReceiptMasterEntity entity : findAllWhereClause) {
			
			String memberName = entity.getTblMembershipForm().getMemberName();
			System.out.println("memberName" + memberName);
			TblReceiptMaster tblReceiptMaster = tblReceiptMasterServiceMapper
					.mapTblReceiptMasterEntityToTblReceiptMaster(entity);
			tblReceiptMaster.setMemberName(memberName);
			// beans.add(tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(entity));
			beans.add(tblReceiptMaster);
			
			
			
		}
		System.out.println("beans"+beans.toString());
		return beans;
		
	}

	@Override
	public String printPDFMembershipForm(String memberId, String param_chequenumber, String chequedateNew,
			String param_chequebank, String receiptPk, HttpServletRequest request, HttpServletResponse response) {
		
		Connection connection=null;
		String param_chequedate="";
		
		System.out.println("memberId : "+memberId);
		System.out.println("param_chequenumber : "+param_chequenumber);
		System.out.println("param_chequedate : "+chequedateNew);
		System.out.println("receiptPk : "+receiptPk);
		
		try {              

			if(chequedateNew!=null && chequedateNew.isEmpty()==false)
			{
			SimpleDateFormat orginaldateformat = new SimpleDateFormat("dd/MM/yyyy");
			Date orginalchequedate = orginaldateformat.parse(chequedateNew);

			
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd MMM yyyy");
			param_chequedate = simpleDateFormat.format(orginalchequedate);
			}
			else
			{
				param_chequedate ="";
			}
			
						 
			
			HashMap params = new HashMap();
			Object ridasIndia;
			
			params.put("memberId", memberId);			
			params.put("param_chequenumber", param_chequenumber);
			params.put("param_chequedate", param_chequedate);			
			params.put("param_chequebank", param_chequebank);
			params.put("param_receiptPk", receiptPk);
			
			HttpSession session = request.getSession();
			connection = tblReceiptMasterPersistence.myconnection();
			
			
			String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
			
			//ImageSavePath+="\\";
			String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\membershipenrollment.jasper");
			
			JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
			
			String filename="report_"+memberId+".pdf";
			System.out.println("filename"+filename);
			String reportSavePath=ImageSavePath+filename; 
			try {
				File filereport = new File(reportSavePath);
				if(filereport.exists())
				{
					filereport.delete();
				}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
	        System.out.println("reportSavePath : "+reportSavePath);
			
	       String ImgPath = CommonUtil.getImagePathForWs(request, response);
			
	        
			return ImgPath+filename;
//	        		+ "//filename;

		} catch (Exception e) {
			
			e.printStackTrace();
		}
		finally
		{
			//done as on 17 mar 2016 to close database connection
			if(connection!=null){
				try {
					connection.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return null;
	}

	@Override
	public String printPDFReceipt(String receiptPk, HttpServletRequest request, HttpServletResponse response) {
		
		Connection connection=null;
		System.out.println("receiptPk : "+receiptPk);
		
		try {              
					
			
			
			HashMap params = new HashMap();
			Object ridasIndia;
			
			params.put("receipt_pk", receiptPk);			
			
			
			HttpSession session = request.getSession();
			 connection = tblReceiptMasterPersistence.myconnection();
			
		
			String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
			
			//String RIDASReportPath =AbstractController.getImagePathForSave(request, response, "reports");
			String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\officialreceipt.jasper");
			
			JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
			
			String filename="report_"+receiptPk+".pdf";
			
			String reportSavePath=ImageSavePath+"\\"+filename; 
			System.out.println("filename "+filename);
			try {
				File filereport = new File(reportSavePath);
				if(filereport.exists())
				{
					filereport.delete();
				}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
			
			 String ImgPath = CommonUtil.getImagePathForWs(request, response);
	        return ImgPath+filename;
//	        		+ "//filename;
		}
		catch (Exception e) {
			
			e.printStackTrace();
		}
		finally
		{
			//done as on 17 mar 2016 to close database connection
			if(connection!=null){
				try {
					connection.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return null;

	}
}
