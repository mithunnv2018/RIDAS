/*
 * Created on 29 Feb 2016 ( Time 17:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.supercsv.cellprocessor.ParseInt;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;

import com.ridas.bean.TblMembershipForm;
import com.ridas.bean.TblPlotMaster;
import com.ridas.bean.TblPlotRecMaster;
import com.ridas.bean.TblReceiptMaster;
import com.ridas.bean.jpa.TblMembershipFormEntity;
import com.ridas.bean.jpa.TblPlotMasterEntity;
import com.ridas.bean.jpa.TblPlotRecMasterEntity;
import com.ridas.bean.jpa.TblReceiptMasterEntity;
import com.ridas.business.service.TblMembershipFormService;
import com.ridas.business.service.TblPlotMasterService;
import com.ridas.business.service.TblPlotRecMasterService;
import com.ridas.business.service.mapping.TblMembershipFormServiceMapper;
import com.ridas.business.service.mapping.TblPlotMasterServiceMapper;
import com.ridas.business.service.mapping.TblPlotRecMasterServiceMapper;
import com.ridas.business.service.mapping.TblReceiptMasterServiceMapper;
import com.ridas.persistence.PersistenceServiceProvider;
import com.ridas.persistence.services.TblPlotMasterPersistence;
import com.ridas.persistence.services.TblPlotRecMasterPersistence;
import com.ridas.persistence.services.TblReceiptMasterPersistence;
import com.ridas.web.common.AbstractController;

import bussinessapi.AmountByWord;

/**
 * Implementation of TblPlotRecMasterService
 */
@Component
public class TblPlotRecMasterServiceImpl implements TblPlotRecMasterService {

	private TblPlotRecMasterPersistence tblPlotRecMasterPersistence;
	private TblPlotMasterPersistence tblPlotMasterPersistence;
	private TblReceiptMasterPersistence tblReceiptMasterPersistence;
	@Resource
	private TblPlotRecMasterServiceMapper tblPlotRecMasterServiceMapper;

	@Resource
	private TblReceiptMasterServiceMapper tblReceiptMasterServiceMapper;

	@Resource
	private TblMembershipFormServiceMapper tblMembershipFormServiceMapper;

	@Resource
	private TblPlotMasterServiceMapper tblPlotMasterServiceMapper;

	@Resource
	private TblPlotMasterService tblPlotMasterService;
	
	@Resource
	private TblMembershipFormService tblMembershipFormService;

	public TblPlotRecMasterServiceImpl() {
		tblPlotRecMasterPersistence = PersistenceServiceProvider.getService(TblPlotRecMasterPersistence.class);
		tblPlotMasterPersistence = PersistenceServiceProvider.getService(TblPlotMasterPersistence.class);
		tblReceiptMasterPersistence = PersistenceServiceProvider.getService(TblReceiptMasterPersistence.class);
	}

	
	@Override
	public TblPlotRecMaster findById(Integer plotReceiptId) {

		TblPlotRecMasterEntity entity = tblPlotRecMasterPersistence.load(plotReceiptId);
		
		Integer plotPk=entity.getTblPlotMaster().getPlotPk();
		
		TblPlotMasterEntity tblPlotMasterEntity = entity.getTblPlotMaster();
		TblReceiptMasterEntity tblReceiptMasterEntity = entity.getTblReceiptMaster();
		TblMembershipFormEntity tblMembershipFormEntity = tblReceiptMasterEntity.getTblMembershipForm();
		TblMembershipForm tblMembershipForm = tblMembershipFormServiceMapper
				.mapTblMembershipFormEntityToTblMembershipForm(tblMembershipFormEntity);
		TblPlotMaster tblPlotMaster = tblPlotMasterServiceMapper
				.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntity);
		TblPlotRecMaster tblPlotRecMaster = tblPlotRecMasterServiceMapper
				.mapTblPlotRecMasterEntityToTblPlotRecMaster(entity);
		TblReceiptMaster tblReceiptMaster = tblReceiptMasterServiceMapper
				.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity);

		String memberId = tblReceiptMaster.getMemberId();
		TblMembershipForm findByIdMember = tblMembershipFormService.findById(memberId);
		String memberName = findByIdMember.getMemberName();
		
		List<TblPlotMasterEntity> loadAllplotNo = tblPlotMasterPersistence.populatePlotNo(memberId);
		
		List plotNoList = new ArrayList();
		for (TblPlotMasterEntity tblPlotMasterEntity1 : loadAllplotNo) {
			TblPlotMaster plotnoList = tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntity1);
			
			plotNoList.add(plotnoList);
			
		}
		
		
		TblPlotMaster findByIdPlot = tblPlotMasterService.findById(plotPk);
		String plotNo = findByIdPlot.getPlotNo();
		

		tblPlotRecMaster.setMemberId(memberId);
		tblPlotRecMaster.setMemberName(memberName);
		tblPlotRecMaster.setTblMembershipForm(tblMembershipForm);
		tblPlotRecMaster.setTblPlotMaster(tblPlotMaster);
		tblPlotRecMaster.setTblReceiptMaster(tblReceiptMaster);
		tblPlotRecMaster.setPlotNo(plotNo);
		tblPlotRecMaster.setPlotNoList(plotNoList);

		return tblPlotRecMaster;
	}

	/*
	 * @Override public List<TblPlotRecMaster> findAll() {
	 * List<TblPlotRecMasterEntity> entities =
	 * tblPlotRecMasterPersistence.loadAll(); List<TblPlotRecMaster> beans = new
	 * ArrayList<TblPlotRecMaster>(); for (TblPlotRecMasterEntity entity :
	 * entities) { beans.add(tblPlotRecMasterServiceMapper.
	 * mapTblPlotRecMasterEntityToTblPlotRecMaster(entity)); } return beans; }
	 */

	/*
	 * done as on 1 Mar 2016
	 */
	@Override
	public List<TblPlotRecMaster> findAll() {
		List<TblPlotRecMasterEntity> entities = tblPlotRecMasterPersistence.loadAll();
		// List<TblMembershipForm> beanMembershipForm = new
		// ArrayList<TblMembershipForm>();

		List<TblPlotRecMaster> beans = new ArrayList<TblPlotRecMaster>();
		for (TblPlotRecMasterEntity entity : entities) {
			TblPlotMasterEntity tblPlotMasterEntity = entity.getTblPlotMaster();
			TblReceiptMasterEntity tblReceiptMasterEntity = entity.getTblReceiptMaster();

			TblPlotRecMaster tblPlotRecMaster = tblPlotRecMasterServiceMapper
					.mapTblPlotRecMasterEntityToTblPlotRecMaster(entity);

			TblReceiptMaster tblReceiptMaster = tblReceiptMasterServiceMapper
					.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity);// tblPlotRecMasterServiceMapper.mapTblPlotRecMasterEntityToTblPlotRecMaster(entity);
			TblPlotMaster tblPlotMaster = tblPlotMasterServiceMapper
					.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntity);

			String memberId = tblReceiptMaster.getMemberId();
			TblMembershipForm findById = tblMembershipFormService.findById(memberId);
			String memberName = findById.getMemberName();
			tblPlotRecMaster.setMemberId(memberId);
			tblPlotRecMaster.setMemberName(memberName);
			tblPlotRecMaster.setTblPlotMaster(tblPlotMaster);
			tblPlotRecMaster.setTblReceiptMaster(tblReceiptMaster);

			beans.add(tblPlotRecMaster);

		}
		return beans;
	}

	@Override
	public TblPlotRecMaster save(TblPlotRecMaster tblPlotRecMaster) {
		return update(tblPlotRecMaster);
	}

	@Override
	public TblPlotRecMaster create(TblPlotRecMaster tblPlotRecMaster) {
		try {
			if (tblPlotRecMasterPersistence.load(tblPlotRecMaster.getPlotReceiptId()) != null) {
				throw new IllegalStateException("already.exists");
			}
			TblReceiptMaster tblReceiptMaster = tblPlotRecMaster.getTblReceiptMaster();
			String memberId = tblPlotRecMaster.getMemberId();
			tblReceiptMaster.setMemberId(memberId);
			tblReceiptMaster.setReceiptType("plotadvance");
			Double receiptAmount = tblReceiptMaster.getReceiptAmount();
			AmountByWord amountByWord = new AmountByWord();
			amountByWord.setLanguage("en");
			amountByWord.setCurrency("IN");

			String amountinword = amountByWord.getAmountByWord(receiptAmount);

			amountinword = AbstractController.capitalizeAmount(amountinword);

			tblReceiptMaster.setReceiptAmountinwords(amountinword);

			TblPlotRecMasterEntity tblPlotRecMasterEntity = new TblPlotRecMasterEntity();
			TblReceiptMasterEntity tblReceiptMasterEntity = new TblReceiptMasterEntity();

			tblReceiptMasterServiceMapper.mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster,
					tblReceiptMasterEntity);
			tblReceiptMasterEntity.setReceiptPk("temp");

			tblReceiptMasterEntity = tblReceiptMasterPersistence.save(tblReceiptMasterEntity);

			String receiptPk = tblReceiptMasterEntity.getReceiptPk();
			tblPlotRecMaster.setReceiptPk(receiptPk);
			tblPlotRecMasterServiceMapper.mapTblPlotRecMasterToTblPlotRecMasterEntity(tblPlotRecMaster,
					tblPlotRecMasterEntity);

			TblPlotRecMasterEntity tblPlotRecMasterEntitySaved = tblPlotRecMasterPersistence
					.save(tblPlotRecMasterEntity);
			return tblPlotRecMasterServiceMapper
					.mapTblPlotRecMasterEntityToTblPlotRecMaster(tblPlotRecMasterEntitySaved);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return tblPlotRecMaster;
	}

	@Override
	public TblPlotRecMaster update(TblPlotRecMaster tblPlotRecMaster) {
		TblPlotRecMasterEntity tblPlotRecMasterEntity = tblPlotRecMasterPersistence
				.load(tblPlotRecMaster.getPlotReceiptId());

		String memberId = tblPlotRecMaster.getMemberId();
		
		TblReceiptMaster tblReceiptMaster = tblPlotRecMaster.getTblReceiptMaster();
		String receiptPk = tblPlotRecMaster.getReceiptPk();
		
		tblReceiptMaster.setReceiptPk(receiptPk);
		tblReceiptMaster.setMemberId(memberId);
		TblReceiptMasterEntity tblReceiptMasterEntity = new TblReceiptMasterEntity();

		tblReceiptMasterServiceMapper.mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster,
				tblReceiptMasterEntity);
		tblReceiptMasterPersistence.save(tblReceiptMasterEntity);
		tblPlotRecMasterServiceMapper.mapTblPlotRecMasterToTblPlotRecMasterEntity(tblPlotRecMaster,
				tblPlotRecMasterEntity);
		TblPlotRecMasterEntity tblPlotRecMasterEntitySaved = tblPlotRecMasterPersistence.save(tblPlotRecMasterEntity);
		return tblPlotRecMasterServiceMapper.mapTblPlotRecMasterEntityToTblPlotRecMaster(tblPlotRecMasterEntitySaved);
	}

	@Override
	public void delete(Integer plotReceiptId) {
		tblPlotRecMasterPersistence.delete(plotReceiptId);
	}

	public TblPlotRecMasterPersistence getTblPlotRecMasterPersistence() {
		return tblPlotRecMasterPersistence;
	}

	public void setTblPlotRecMasterPersistence(TblPlotRecMasterPersistence tblPlotRecMasterPersistence) {
		this.tblPlotRecMasterPersistence = tblPlotRecMasterPersistence;
	}

	public TblPlotRecMasterServiceMapper getTblPlotRecMasterServiceMapper() {
		return tblPlotRecMasterServiceMapper;
	}

	public void setTblPlotRecMasterServiceMapper(TblPlotRecMasterServiceMapper tblPlotRecMasterServiceMapper) {
		this.tblPlotRecMasterServiceMapper = tblPlotRecMasterServiceMapper;
	}

	/**
	 * done as on 13 feb 2016 added for TblUserMaster for retrieving user
	 * details for login
	 */

	@Override
	public Boolean doImportExcelSpreadSheet(MultipartFile file) throws IOException {

		ICsvBeanReader beanReader = null;
		try {
			// done as on 22-feb-2016 code to remove unwanted fields from list

			beanReader = new CsvBeanReader(new InputStreamReader(file.getInputStream()),
					CsvPreference.STANDARD_PREFERENCE);
			final String[] header = beanReader.getHeader(true);
			final CellProcessor[] processors = new CellProcessor[] { new NotNull(), new ParseInt()

			};

			TblPlotRecMaster tblPlotRecMaster = new TblPlotRecMaster();
			while ((tblPlotRecMaster = beanReader.read(TblPlotRecMaster.class, header, processors)) != null) {

				// done as on 19 feb 2016 save primary key default to temp
				java.lang.Integer DUMMY = new java.lang.Integer(0 + "");

				tblPlotRecMaster.setPlotReceiptId(DUMMY);

				create(tblPlotRecMaster);
			}
		} finally {
			if (beanReader != null) {
				beanReader.close();
			}
		}
		return true;
	}
}
