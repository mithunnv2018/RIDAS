/*
 * Created on 18 Mar 2016 ( Time 11:55:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;

import com.ridas.bean.TblReceiptMaster;
import com.ridas.bean.TblRtgsPaidDetails;
import com.ridas.bean.jpa.TblReceiptMasterEntity;
import com.ridas.bean.jpa.TblRtgsPaidDetailsEntity;
import com.ridas.business.service.TblRtgsPaidDetailsService;
import com.ridas.business.service.mapping.TblReceiptMasterServiceMapper;
import com.ridas.business.service.mapping.TblRtgsPaidDetailsServiceMapper;
import com.ridas.common.CommonUtil;
import com.ridas.persistence.PersistenceServiceProvider;
import com.ridas.persistence.services.TblReceiptMasterPersistence;
import com.ridas.persistence.services.TblRtgsPaidDetailsPersistence;

import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.export.ooxml.JRXlsxExporter;

/**
 * Implementation of TblRtgsPaidDetailsService
 */
@Component
public class TblRtgsPaidDetailsServiceImpl implements TblRtgsPaidDetailsService {

	private TblReceiptMasterPersistence tblReceiptMasterPersistence;

	private TblRtgsPaidDetailsPersistence tblRtgsPaidDetailsPersistence;

	@Resource
	private TblRtgsPaidDetailsServiceMapper tblRtgsPaidDetailsServiceMapper;

	@Resource
	private TblReceiptMasterServiceMapper tblReceiptMasterServiceMapper;

	public TblRtgsPaidDetailsServiceImpl() {
		tblRtgsPaidDetailsPersistence = PersistenceServiceProvider.getService(TblRtgsPaidDetailsPersistence.class);
		tblReceiptMasterPersistence = PersistenceServiceProvider.getService(TblReceiptMasterPersistence.class);
	}

	@Override
	public TblRtgsPaidDetails findById(Integer rtgsDetailsId) {
		TblRtgsPaidDetailsEntity entity = tblRtgsPaidDetailsPersistence.load(rtgsDetailsId);
		return tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(entity);
	}

	@Override
	public List<TblRtgsPaidDetails> findAll() {
		List<TblRtgsPaidDetailsEntity> entities = tblRtgsPaidDetailsPersistence.loadAll();
		List<TblRtgsPaidDetails> beans = new ArrayList<TblRtgsPaidDetails>();
		for (TblRtgsPaidDetailsEntity entity : entities) {
			TblRtgsPaidDetails tblRtgsPaidDetails = tblRtgsPaidDetailsServiceMapper
					.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(entity);
			// tblRtgsPaidDetails.setProfit(profit);
			beans.add(tblRtgsPaidDetails);

		}
		return beans;
	}

	@Override
	public TblRtgsPaidDetails save(TblRtgsPaidDetails tblRtgsPaidDetails) {
		return update(tblRtgsPaidDetails);
	}

	@Override
	public TblRtgsPaidDetails create(TblRtgsPaidDetails tblRtgsPaidDetails) {
		if (tblRtgsPaidDetailsPersistence.load(tblRtgsPaidDetails.getRtgsDetailsId()) != null) {
			throw new IllegalStateException("already.exists");
		}
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity = new TblRtgsPaidDetailsEntity();

		tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsToTblRtgsPaidDetailsEntity(tblRtgsPaidDetails,
				tblRtgsPaidDetailsEntity);

		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntitySaved = tblRtgsPaidDetailsPersistence
				.save(tblRtgsPaidDetailsEntity);
		return tblRtgsPaidDetailsServiceMapper
				.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(tblRtgsPaidDetailsEntitySaved);
	}

	@Override
	public TblRtgsPaidDetails update(TblRtgsPaidDetails tblRtgsPaidDetails) {
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity = tblRtgsPaidDetailsPersistence
				.load(tblRtgsPaidDetails.getRtgsDetailsId());
		tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsToTblRtgsPaidDetailsEntity(tblRtgsPaidDetails,
				tblRtgsPaidDetailsEntity);
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntitySaved = tblRtgsPaidDetailsPersistence
				.save(tblRtgsPaidDetailsEntity);
		return tblRtgsPaidDetailsServiceMapper
				.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(tblRtgsPaidDetailsEntitySaved);
	}

	@Override
	public void delete(Integer rtgsDetailsId) {
		tblRtgsPaidDetailsPersistence.delete(rtgsDetailsId);
	}

	public TblRtgsPaidDetailsPersistence getTblRtgsPaidDetailsPersistence() {
		return tblRtgsPaidDetailsPersistence;
	}

	public void setTblRtgsPaidDetailsPersistence(TblRtgsPaidDetailsPersistence tblRtgsPaidDetailsPersistence) {
		this.tblRtgsPaidDetailsPersistence = tblRtgsPaidDetailsPersistence;
	}

	public TblRtgsPaidDetailsServiceMapper getTblRtgsPaidDetailsServiceMapper() {
		return tblRtgsPaidDetailsServiceMapper;
	}

	public void setTblRtgsPaidDetailsServiceMapper(TblRtgsPaidDetailsServiceMapper tblRtgsPaidDetailsServiceMapper) {
		this.tblRtgsPaidDetailsServiceMapper = tblRtgsPaidDetailsServiceMapper;
	}

	/**
	 * done as on 13 feb 2016 added for TblUserMaster for retrieving user
	 * details for login
	 */

	@Override
	public Boolean doImportExcelSpreadSheet(MultipartFile file) throws IOException {

		ICsvBeanReader beanReader = null;
		try {
			// done as on 22-feb-2016 code to remove unwanted fields from list

			beanReader = new CsvBeanReader(new InputStreamReader(file.getInputStream()),
					CsvPreference.STANDARD_PREFERENCE);
			final String[] header = beanReader.getHeader(true);
			final CellProcessor[] processors = new CellProcessor[] { new NotNull(), new NotNull(), new NotNull(),
					new NotNull()

			};

			TblRtgsPaidDetails tblRtgsPaidDetails = new TblRtgsPaidDetails();
			while ((tblRtgsPaidDetails = beanReader.read(TblRtgsPaidDetails.class, header, processors)) != null) {

				// done as on 19 feb 2016 save primary key default to temp
				java.lang.Integer DUMMY = new java.lang.Integer(0 + "");

				tblRtgsPaidDetails.setRtgsDetailsId(DUMMY);

				create(tblRtgsPaidDetails);
			}
		} finally {
			if (beanReader != null) {
				beanReader.close();
			}
		}
		return true;
	}

	@Override
	public List findAllByProfit(Integer profit) {

		List<TblReceiptMasterEntity> loadAllByProfit = tblRtgsPaidDetailsPersistence.loadAllByProfit(profit);
		List<TblReceiptMaster> beans = new ArrayList<TblReceiptMaster>();

		for (TblReceiptMasterEntity tblReceiptMasterEntity : loadAllByProfit) {
			TblReceiptMaster receiptMaster = tblReceiptMasterServiceMapper
					.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity);
			String memberName = tblReceiptMasterEntity.getTblMembershipForm().getMemberName();

			receiptMaster.setMemberName(memberName);
			beans.add(receiptMaster);
		}
		System.out.println("beans" + beans.toString());
		return beans;

	}

	
	@Override
	public String findAllByYear(String paramyear,  HttpServletRequest request, HttpServletResponse response) {
		List loadAllByYear = tblRtgsPaidDetailsPersistence.findAllByYear(paramyear);
		List beans = new ArrayList();
		
		int rowCount = 0;
		String oldmemberid="";
		Boolean doneadding=false;
		Row row =null;
//		TblRtgsPaidDetails tblRtgsPaidDetails=null;
		
		 Workbook workbook = new HSSFWorkbook();
		 Sheet sheet = workbook.createSheet();
		 
			
			
		for(int i=0;i<loadAllByYear.size();i++){
			Object[] object = (Object[]) loadAllByYear.get(i);
			Double sumOfAmount=(Double) object[0];
			String month=(String) object[1];
			String memberId=(String) object[2];
			String memberName=(String) object[3];
			
			int parseIntmonth = Integer.parseInt(month);
			Integer monthrow=parseIntmonth+2;
			/*HashMap<String, Object> mapHome=new HashMap();
			
			mapHome.put("memberId", memberId);
			mapHome.put("memberName", memberName);
			mapHome.put("sumOfAmount", sumOfAmount);
			
			mapHome.put("month", month);
			*/
			/*TblRtgsPaidDetails tblRtgsPaidDetails=new TblRtgsPaidDetails();
			tblRtgsPaidDetails.setMemberId(memberId);
			tblRtgsPaidDetails.setMemberName(memberName);
			tblRtgsPaidDetails.setMonth(month);
			tblRtgsPaidDetails.setSumOfAmount(sumOfAmount);
			beans.add(tblRtgsPaidDetails);*/
			
			
				if(rowCount==0)
				{
					row= sheet.createRow(rowCount);
			     Cell cell = row.createCell(1);
			    cell.setCellValue("Member Id");
			 
			    cell = row.createCell(2);
			    cell.setCellValue("Member Name");
			 
			    /*cell = row.createCell(3);
			    cell.setCellValue("Sum of Amount");*/
			    
			    cell = row.createCell(3);
			    cell.setCellValue("January"); 
			    
			    cell = row.createCell(4);
			    cell.setCellValue("February"); 
			    
			    cell = row.createCell(5);
			    cell.setCellValue("March"); 
			    
			    cell = row.createCell(6);
			    cell.setCellValue("April"); 
			    
			    cell = row.createCell(7);
			    cell.setCellValue("May"); 
			    
			    cell = row.createCell(8);
			    cell.setCellValue("June"); 
			    
			    cell = row.createCell(9);
			    cell.setCellValue("July"); 
			    
			    cell = row.createCell(10);
			    cell.setCellValue("August"); 
			    
			    cell = row.createCell(11);
			    cell.setCellValue("September"); 
			    
			    cell = row.createCell(12);
			    cell.setCellValue("October"); 
			    
			    cell = row.createCell(13);
			    cell.setCellValue("November"); 
			    
			    cell = row.createCell(14);
			    cell.setCellValue("December"); 
			     
		}
			    
			    
			    if(oldmemberid.equals(memberId)){
			    	
//			    	Cell cell = row.createCell(1);
//				    cell.setCellValue(memberId);
//				 
//				    cell = row.createCell(2);
//				    cell.setCellValue(memberName);
				 
			    	Cell cell = row.createCell(monthrow);
				    cell.setCellValue(sumOfAmount);
			    }
			    else
			    {
			    	oldmemberid=memberId;
			    	row= sheet.createRow(++rowCount);
			    	
			    	Cell cell = row.createCell(1);
				    cell.setCellValue(memberId);
				 
				    cell = row.createCell(2);
				    cell.setCellValue(memberName);
				 
				    cell = row.createCell(monthrow);
				    cell.setCellValue(sumOfAmount);
				    
			    }
	
			  
				
			    
		}
		
		String ImageSavePath = CommonUtil.getImagePathForSave(request, response);

        String excelFileName = paramyear+"RTGSYearlyReport.xls";
	   // String excelFileName = "aa.xls";

        
        String reportSavePath = ImageSavePath + "\\" + excelFileName;
		System.out.println("filename " + excelFileName);
		try {
			File filereport = new File(reportSavePath);
			if (filereport.exists()) {
				filereport.delete();
			}

		
			FileOutputStream fos = new FileOutputStream(reportSavePath);
			
			workbook.write(fos);
			
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		
		String ImgPath = CommonUtil.getImagePathForWs(request, response);
		System.out.println("EXcelReport : " + ImgPath + excelFileName);
		return ImgPath + excelFileName;
		

	}
	
	
	
	
	
	@Override
	public String printRTGSReport(String profit, HttpServletRequest request, HttpServletResponse response) {

		Connection connection = null;
		System.out.println("profit : " + profit);

		try {

			HashMap params = new HashMap();
			Object ridasIndia;

			params.put("profit", profit);

			HttpSession session = request.getSession();
			connection = tblReceiptMasterPersistence.myconnection();

			String ImageSavePath = CommonUtil.getImagePathForSave(request, response);

			String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\RTGSReport.jasper");

			JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);

			String filename = "report_" + profit + ".xlsx";

			String reportSavePath = ImageSavePath + "\\" + filename;
			System.out.println("filename " + filename);
			try {
				File filereport = new File(reportSavePath);
				if (filereport.exists()) {
					filereport.delete();
				}

			} catch (Exception e) {

				e.printStackTrace();
			}

			FileOutputStream fileOutputStream = new FileOutputStream(reportSavePath);

			JRXlsxExporter xlsxExporter = new JRXlsxExporter();
			xlsxExporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			xlsxExporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename);
			xlsxExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, fileOutputStream);

			xlsxExporter.exportReport();
			String ImgPath = CommonUtil.getImagePathForWs(request, response);
			System.out.println("EXcelReport : " + ImgPath + filename);
			return ImgPath + filename;
		} catch (Exception e) {

			e.printStackTrace();
		}

		finally {

			if (connection != null) {
				try {
					connection.close();
				} catch (SQLException e) {

					e.printStackTrace();
				}
			}
		}
		return null;

	}

	@Override
	public String printMonthlyRTGSReport(String paramprofit, String parammonth, String paramyear, String parampaid,
			HttpServletRequest request, HttpServletResponse response) {
		Connection connection = null;
		System.out.println("..profit : "+paramprofit+" month :"+parammonth+" year : "+paramyear+" paid : "+parampaid);
		try {

			HashMap params = new HashMap();
			Object ridasIndia;

			params.put("profit", paramprofit);
			params.put("month", parammonth);	
			params.put("year", paramyear);	
			params.put("paid", parampaid);
			
			HttpSession session = request.getSession();
			connection = tblReceiptMasterPersistence.myconnection();

			String ImageSavePath = CommonUtil.getImagePathForSave(request, response);

			String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\RTGSMonthlyReport.jasper");

			JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);

			String filename = "report_" + paramprofit+parammonth+paramyear+ ".xlsx";

			String reportSavePath = ImageSavePath + "\\" + filename;
			System.out.println("filename " + filename);
			try {
				File filereport = new File(reportSavePath);
				if (filereport.exists()) {
					filereport.delete();
				}

			} catch (Exception e) {

				e.printStackTrace();
			}

			FileOutputStream fileOutputStream = new FileOutputStream(reportSavePath);

			JRXlsxExporter xlsxExporter = new JRXlsxExporter();
			xlsxExporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			xlsxExporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename);
			xlsxExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, fileOutputStream);

			xlsxExporter.exportReport();
			String ImgPath = CommonUtil.getImagePathForWs(request, response);
			System.out.println("EXcelReport : " + ImgPath + filename);
			return ImgPath + filename;
		} catch (Exception e) {

			e.printStackTrace();
		}

		finally {

			if (connection != null) {
				try {
					connection.close();
				} catch (SQLException e) {

					e.printStackTrace();
				}
			}
		}
		return null;
	}

	@Override
	public String printYearlyRTGSReport(List result, HttpServletRequest request, HttpServletResponse response) {
		
			System.out.println("ReportofUsersController.doRealExportToExcel()");
			try {
				HSSFWorkbook wb = new HSSFWorkbook();
				HSSFSheet createSheet = wb.createSheet("Caddybook Report");

				Iterator iterator = result.iterator();
				int rowno = 1;

				while (iterator.hasNext()) {
					// Object[] row = (Object[])iterator.next();
					HashMap row = (HashMap) iterator.next();

					Set keySet = row.keySet();

					if (rowno == 1) {
						int col2 = 0;
						Iterator iterator3 = keySet.iterator();
						HSSFRow createRow2 = createSheet.createRow(0);

						while (iterator3.hasNext()) {

							String key = (String) iterator3.next();

							HSSFCell createCell = createRow2.createCell(col2);
							createCell.setCellValue(key + "");

							col2 += 1;
						}

					}

					HSSFRow createRow = createSheet.createRow(rowno);
					Iterator iterator2 = keySet.iterator();
					int col = 0;

					while (iterator2.hasNext()) {

						String key = (String) iterator2.next();
						HSSFCell createCell = createRow.createCell(col);
						createCell.setCellValue(row.get(key) + "");
						System.out.println(row.get(key));

						col++;
					}

					// for (int col = 0; col < row.length; col++) {
					//
					// HSSFCell createCell = createRow.createCell(col);
					// createCell.setCellValue(row[col]+"");
					// System.out.println(row[col]);
					// }

					rowno += 1;
				}

				String excelFileName = "aa.xls";

				FileOutputStream fos = new FileOutputStream(excelFileName);
				// OutputStream os=new ByteArrayOutputStream();
				wb.write(fos);
				// os.flush();
				// os.close();

				fos.flush();
				fos.close();
				File file = new File(excelFileName);
				// downloadEXCEL(f);

				// FileInputStream stream = new FileInputStream(f);//excelFileName);
				//
				// exportFile = new DefaultStreamedContent(stream,
				// "application/vnd.ms-excel", f.getName());
				//
				// System.out.println(f.exists()+"Done Exporting = "+exportFile.getName()+"Username="+username);
				//
				//
				//

			} catch (Exception e) {
				System.out.println("ReportofUsersController.doRealExportToExcel()");
				System.err.println("Sorry eror " + e.getMessage());
				e.printStackTrace();
			}
			return null;
		}
}