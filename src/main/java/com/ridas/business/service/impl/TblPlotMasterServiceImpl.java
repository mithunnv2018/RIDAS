/*
 * Created on 29 Feb 2016 ( Time 17:46:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.supercsv.cellprocessor.ParseDate;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;

import com.ridas.bean.TblMembershipForm;
import com.ridas.bean.TblPlotMaster;
import com.ridas.bean.jpa.TblMembershipFormEntity;
import com.ridas.bean.jpa.TblPlotMasterEntity;
import com.ridas.business.service.TblPlotMasterService;
import com.ridas.business.service.mapping.TblMembershipFormServiceMapper;
import com.ridas.business.service.mapping.TblPlotMasterServiceMapper;
import com.ridas.common.CommonUtil;
import com.ridas.persistence.PersistenceServiceProvider;
import com.ridas.persistence.services.TblPlotMasterPersistence;

import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
				

/**
 * Implementation of TblPlotMasterService
 */
@Component
public class TblPlotMasterServiceImpl implements TblPlotMasterService {

	private TblPlotMasterPersistence tblPlotMasterPersistence;

	@Resource
	private TblPlotMasterServiceMapper tblPlotMasterServiceMapper;

	@Resource
	private TblMembershipFormServiceMapper tblMembershipFormServiceMapper;
	
	
	public TblPlotMasterServiceImpl() {
		tblPlotMasterPersistence = PersistenceServiceProvider.getService(TblPlotMasterPersistence.class);
	}
		
	@Override
	public TblPlotMaster findById(Integer plotPk) {
		TblPlotMasterEntity entity = tblPlotMasterPersistence.load(plotPk);
		TblMembershipFormEntity tblMembershipFormEntity = entity.getTblMembershipForm();
		
		String memberFkName ="";
		if(tblMembershipFormEntity!=null)
		{
		
			memberFkName = tblMembershipFormEntity.getMemberName();//.getMemberId();
		}
//		TblMembershipFormEntity membershipFormEntity = tblMembershipFormPersistence.load(memberId);
		
		TblMembershipForm tblMembershipForm = tblMembershipFormServiceMapper.mapTblMembershipFormEntityToTblMembershipForm(tblMembershipFormEntity);
		 TblPlotMaster plotMaster = tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(entity);
		 tblMembershipForm.setMemberFkName(memberFkName);
		 plotMaster.setTblMembershipForm(tblMembershipForm);
		return plotMaster;
		 
	}

	@Override
	public List<TblPlotMaster> findAll() {
		List<TblPlotMasterEntity> entities = tblPlotMasterPersistence.loadAll();
		
		List<TblPlotMaster> beans = new ArrayList<TblPlotMaster>();
		for(TblPlotMasterEntity entity : entities) {
			TblMembershipFormEntity tblMembershipFormEntity = entity.getTblMembershipForm();
			
			String memberFkName ="";
			if(tblMembershipFormEntity!=null)
			{
			
				memberFkName = tblMembershipFormEntity.getMemberName();//.getMemberId();
			}
			TblMembershipForm tblMembershipForm = tblMembershipFormServiceMapper.mapTblMembershipFormEntityToTblMembershipForm(tblMembershipFormEntity);
			TblPlotMaster plotMaster = tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(entity);
			 tblMembershipForm.setMemberFkName(memberFkName);
			 plotMaster.setTblMembershipForm(tblMembershipForm);
			beans.add(plotMaster);
		}
		return beans;
	}

	@Override
	public TblPlotMaster save(TblPlotMaster tblPlotMaster) {
		return update(tblPlotMaster) ;
	}

	@Override
	public TblPlotMaster create(TblPlotMaster tblPlotMaster) {
		if(tblPlotMasterPersistence.load(tblPlotMaster.getPlotPk()) != null) {
			throw new IllegalStateException("already.exists");
		}
		TblPlotMasterEntity tblPlotMasterEntity = new TblPlotMasterEntity();

	 	
		
		tblPlotMasterServiceMapper.mapTblPlotMasterToTblPlotMasterEntity(tblPlotMaster, tblPlotMasterEntity);
	 	
		TblPlotMasterEntity tblPlotMasterEntitySaved = tblPlotMasterPersistence.save(tblPlotMasterEntity);
		return tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntitySaved);
		}

	@Override
	public TblPlotMaster update(TblPlotMaster tblPlotMaster) {
		TblPlotMasterEntity tblPlotMasterEntity = tblPlotMasterPersistence.load(tblPlotMaster.getPlotPk());
		tblPlotMasterServiceMapper.mapTblPlotMasterToTblPlotMasterEntity(tblPlotMaster, tblPlotMasterEntity);
		TblPlotMasterEntity tblPlotMasterEntitySaved = tblPlotMasterPersistence.save(tblPlotMasterEntity);
		return tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntitySaved);
	}

	@Override
	public void delete(Integer plotPk) {
		tblPlotMasterPersistence.delete(plotPk);
	}

	public TblPlotMasterPersistence getTblPlotMasterPersistence() {
		return tblPlotMasterPersistence;
	}

	public void setTblPlotMasterPersistence(TblPlotMasterPersistence tblPlotMasterPersistence) {
		this.tblPlotMasterPersistence = tblPlotMasterPersistence;
	}

	public TblPlotMasterServiceMapper getTblPlotMasterServiceMapper() {
		return tblPlotMasterServiceMapper;
	}

	public void setTblPlotMasterServiceMapper(TblPlotMasterServiceMapper tblPlotMasterServiceMapper) {
		this.tblPlotMasterServiceMapper = tblPlotMasterServiceMapper;
	}

/**
	* 	done as on 13 feb 2016 added for TblUserMaster for retrieving user details for login
    */

	@Override
	public Boolean doImportExcelSpreadSheet(MultipartFile file) throws IOException {
		
		ICsvBeanReader beanReader = null;
		try
		{
//done as on 22-feb-2016  code to remove unwanted fields from list

			beanReader = new CsvBeanReader(new InputStreamReader(file.getInputStream()),
					CsvPreference.STANDARD_PREFERENCE);
			final String[] header = beanReader.getHeader(true);
			final CellProcessor[] processors = new CellProcessor[] { 
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new NotNull()
					,
					new ParseDate("MM/dd/yyyy")					

					,
					new ParseDate("MM/dd/yyyy")					

					,
					new NotNull()
					,
					new NotNull()
					,
					new ParseDate("MM/dd/yyyy")					

					,
					new NotNull()

			};

			TblPlotMaster tblPlotMaster=new TblPlotMaster();
			while((tblPlotMaster=beanReader.read(TblPlotMaster.class, header,processors))!=null){

		
		 
			
			// done as on 19 feb 2016  save primary key default to temp
				java.lang.Integer DUMMY=new java.lang.Integer(0+"");

				tblPlotMaster.setPlotPk(DUMMY);

			 	create(tblPlotMaster);
			}
		}
		finally
		{
			if( beanReader != null ) {
                beanReader.close();
        	}
		}
		return true;
	}
	
	
	@Override
	public List<TblPlotMaster> populatePlotNo(String memberId) {
		       
		List<TblPlotMasterEntity> populatePlotNo = tblPlotMasterPersistence.populatePlotNo(memberId);
		
		List<TblPlotMaster> beans = new ArrayList<TblPlotMaster>();
		for(TblPlotMasterEntity WhereClause : populatePlotNo) {
			beans.add(tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(WhereClause));
		}
		System.out.println("beans"+beans.toString());
		return beans;
		
	}

	@Override
	public List<TblPlotMaster> loadAllById(Integer plotPk) {
	       
			List<TblPlotMasterEntity> plotNoList = tblPlotMasterPersistence.loadAllById(plotPk);
			
			List<TblPlotMaster> beans = new ArrayList<TblPlotMaster>();
			for(TblPlotMasterEntity WhereClause : plotNoList) {
				beans.add(tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(WhereClause));
			}
			System.out.println("beans"+beans.toString());
			return beans;
			
	}

	@Override
	public String printPlotPDFForm(Integer plotPk, String receiptPk, HttpServletRequest request,
			HttpServletResponse response) {
	Connection connection=null;
		
		try {              

			
		
						 
			
			HashMap params = new HashMap();
			Object ridasIndia;
			
			params.put("param_plot_pk", plotPk);			
			params.put("param_receiptPk", receiptPk);
			
			HttpSession session = request.getSession();
			connection = tblPlotMasterPersistence.myconnection();
			
			
			String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
			
			
		
			String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\plotEnrollment.jasper");
			
			JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
			
			String filename="report_Plot"+plotPk+".pdf";
			String reportSavePath=ImageSavePath+"\\"+filename; 
			try {
				File filereport = new File(reportSavePath);
				if(filereport.exists())
				{
					filereport.delete();
				}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
			 String ImgPath = CommonUtil.getImagePathForWs(request, response);
				
		        
				return ImgPath+filename;
		}
		 catch (Exception e) {
			
			e.printStackTrace();
		}finally
			{
			//done as on 17 mar 2016 to close database connection
			if(connection!=null){
				try {
					connection.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return null;	
	}

	@Override
	public String printPlotPDFReceipt(String receipt_pk, HttpServletRequest request, HttpServletResponse response) {
		Connection connection=null;
		System.out.println("receiptPk : "+receipt_pk);
		
		try {              
					
			
			
			HashMap params = new HashMap();
			Object ridasIndia;
			
			params.put("receipt_pk", receipt_pk);			
			
			
			HttpSession session = request.getSession();
			 connection = tblPlotMasterPersistence.myconnection();
			
		
			String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
			
			//String RIDASReportPath =AbstractController.getImagePathForSave(request, response, "reports");
			String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\plotReceipt.jasper");
			
			JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
			
			String filename="report_"+receipt_pk+".pdf";
			
			String reportSavePath=ImageSavePath+"\\"+filename; 
			System.out.println("filename "+filename);
			try {
				File filereport = new File(reportSavePath);
				if(filereport.exists())
				{
					filereport.delete();
				}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
			
			 String ImgPath = CommonUtil.getImagePathForWs(request, response);
	        return ImgPath+filename;
//	        		+ "//filename;
		}
		catch (Exception e) {
			
			e.printStackTrace();
		}
		finally
		{
			//done as on 17 mar 2016 to close database connection
			if(connection!=null){
				try {
					connection.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return null;

	}
	
}
