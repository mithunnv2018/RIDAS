/*
 * Created on 29 Feb 2016 ( Time 17:46:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;

import com.ridas.bean.TblBusiAssoMaster;
import com.ridas.bean.TblMembershipForm;
import com.ridas.bean.TblReceiptMaster;
import com.ridas.bean.jpa.TblBusiAssoMasterEntity;
import com.ridas.bean.jpa.TblMembershipFormEntity;
import com.ridas.bean.jpa.TblReceiptMasterEntity;
import com.ridas.business.service.TblBusiAssoMasterService;
import com.ridas.business.service.mapping.TblBusiAssoMasterServiceMapper;
import com.ridas.business.service.mapping.TblMembershipFormServiceMapper;
import com.ridas.business.service.mapping.TblReceiptMasterServiceMapper;
import com.ridas.common.CommonUtil;
import com.ridas.persistence.PersistenceServiceProvider;
import com.ridas.persistence.services.TblBusiAssoMasterPersistence;
import com.ridas.persistence.services.TblReceiptMasterPersistence;
import com.ridas.web.common.AbstractController;

import bussinessapi.AmountByWord;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
				
/**
 * Implementation of TblBusiAssoMasterService
 */
@Component
public class TblBusiAssoMasterServiceImpl implements TblBusiAssoMasterService {

	private TblBusiAssoMasterPersistence tblBusiAssoMasterPersistence;

	
	private TblReceiptMasterPersistence tblReceiptMasterPersistence;
	@Resource
	private TblBusiAssoMasterServiceMapper tblBusiAssoMasterServiceMapper;
	
	@Resource
	private TblReceiptMasterServiceMapper tblReceiptMasterServiceMapper;
	
	@Resource
	private TblMembershipFormServiceMapper tblMembershipFormServiceMapper;
	
	public TblBusiAssoMasterServiceImpl() {
		tblBusiAssoMasterPersistence = PersistenceServiceProvider.getService(TblBusiAssoMasterPersistence.class);
		tblReceiptMasterPersistence=PersistenceServiceProvider.getService(TblReceiptMasterPersistence.class);
	}
		
	@Override
	public TblBusiAssoMaster findById(String buAsId) {
		TblBusiAssoMasterEntity entity = tblBusiAssoMasterPersistence.load(buAsId);
		return tblBusiAssoMasterServiceMapper.mapTblBusiAssoMasterEntityToTblBusiAssoMaster(entity);
	}

	@Override
	public List<TblBusiAssoMaster> findAll() {
		List<TblBusiAssoMasterEntity> entities = tblBusiAssoMasterPersistence.loadAll();
		List<TblBusiAssoMaster> beans = new ArrayList<TblBusiAssoMaster>();
		for(TblBusiAssoMasterEntity entity : entities) {
			TblMembershipFormEntity tblMembershipFormEntity = entity.getTblMembershipForm();
			TblReceiptMasterEntity tblReceiptMasterEntity = entity.getTblReceiptMaster();
			TblMembershipForm member = tblMembershipFormServiceMapper.mapTblMembershipFormEntityToTblMembershipForm(tblMembershipFormEntity);
			TblReceiptMaster receipt = tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity);
			TblBusiAssoMaster tblBusiAssoMaster = tblBusiAssoMasterServiceMapper.mapTblBusiAssoMasterEntityToTblBusiAssoMaster(entity);
			tblBusiAssoMaster.setMember(member);
			tblBusiAssoMaster.setReceipt(receipt);
			beans.add(tblBusiAssoMaster);
		}
		return beans;
	}

	
	@Override
	public TblBusiAssoMaster save(TblBusiAssoMaster tblBusiAssoMaster) {
		return update(tblBusiAssoMaster) ;
	}

	@Override
	public TblBusiAssoMaster create(TblBusiAssoMaster tblBusiAssoMaster) {
		try {
			if(tblBusiAssoMasterPersistence.load(tblBusiAssoMaster.getBuAsId()) != null) {
				throw new IllegalStateException("already.exists");
			}
			TblBusiAssoMasterEntity tblBusiAssoMasterEntity = new TblBusiAssoMasterEntity();
			String memberId = tblBusiAssoMaster.getMemberId();
			TblReceiptMaster tblReceiptMaster = tblBusiAssoMaster.getReceipt();
			tblReceiptMaster.setMemberId(memberId);
			tblReceiptMaster.setReceiptType("businessassociate");
			Double receiptAmount = tblReceiptMaster.getReceiptAmount();
			 AmountByWord amountByWord = new AmountByWord();
			  amountByWord.setLanguage("en");
			  amountByWord.setCurrency("IN");

			  
			String amountinword = amountByWord.getAmountByWord(receiptAmount);
			
			
			amountinword=AbstractController.capitalizeAmount(amountinword);

			tblReceiptMaster.setReceiptAmountinwords(amountinword);
			TblReceiptMasterEntity tblReceiptMasterEntity =new TblReceiptMasterEntity();
			
			tblReceiptMasterServiceMapper.mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster, tblReceiptMasterEntity);
			tblReceiptMasterEntity.setReceiptPk("temp");
			
			tblReceiptMasterEntity=tblReceiptMasterPersistence.save(tblReceiptMasterEntity);
			TblReceiptMaster tblReceiptMaster2 = tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity);
			tblBusiAssoMaster.setReceipt(tblReceiptMaster2);
			tblBusiAssoMaster.setReceiptPk(tblReceiptMaster2.getReceiptPk());
			tblBusiAssoMasterServiceMapper.mapTblBusiAssoMasterToTblBusiAssoMasterEntity(tblBusiAssoMaster, tblBusiAssoMasterEntity);
			
			TblBusiAssoMasterEntity tblBusiAssoMasterEntitySaved = tblBusiAssoMasterPersistence.save(tblBusiAssoMasterEntity);
			return tblBusiAssoMasterServiceMapper.mapTblBusiAssoMasterEntityToTblBusiAssoMaster(tblBusiAssoMasterEntitySaved);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return tblBusiAssoMaster;
	}

	@Override
	public TblBusiAssoMaster update(TblBusiAssoMaster tblBusiAssoMaster) {
	System.out.println("tblBusiAssoMaster : : :"+tblBusiAssoMaster.toString());
		TblBusiAssoMasterEntity tblBusiAssoMasterEntity = tblBusiAssoMasterPersistence.load(tblBusiAssoMaster.getBuAsId());
	
		TblReceiptMaster tblReceiptMaster = tblBusiAssoMaster.getReceipt();
		
		TblReceiptMasterEntity tblReceiptMasterEntity =new TblReceiptMasterEntity();
		
		tblReceiptMasterServiceMapper.mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster, tblReceiptMasterEntity);
		tblReceiptMasterPersistence.save(tblReceiptMasterEntity);
		tblBusiAssoMasterServiceMapper.mapTblBusiAssoMasterToTblBusiAssoMasterEntity(tblBusiAssoMaster, tblBusiAssoMasterEntity);
		System.out.println("tblBusiAssoMasterEntity::"+tblBusiAssoMasterEntity.toString());
		TblBusiAssoMasterEntity tblBusiAssoMasterEntitySaved = tblBusiAssoMasterPersistence.save(tblBusiAssoMasterEntity);
		return tblBusiAssoMasterServiceMapper.mapTblBusiAssoMasterEntityToTblBusiAssoMaster(tblBusiAssoMasterEntitySaved);
	}

	@Override
	public void delete(String buAsId) {
		tblBusiAssoMasterPersistence.delete(buAsId);
	}

	public TblBusiAssoMasterPersistence getTblBusiAssoMasterPersistence() {
		return tblBusiAssoMasterPersistence;
	}

	public void setTblBusiAssoMasterPersistence(TblBusiAssoMasterPersistence tblBusiAssoMasterPersistence) {
		this.tblBusiAssoMasterPersistence = tblBusiAssoMasterPersistence;
	}

	public TblBusiAssoMasterServiceMapper getTblBusiAssoMasterServiceMapper() {
		return tblBusiAssoMasterServiceMapper;
	}

	public void setTblBusiAssoMasterServiceMapper(TblBusiAssoMasterServiceMapper tblBusiAssoMasterServiceMapper) {
		this.tblBusiAssoMasterServiceMapper = tblBusiAssoMasterServiceMapper;
	}

/**
	* 	done as on 13 feb 2016 added for TblUserMaster for retrieving user details for login
    */

	@Override
	public Boolean doImportExcelSpreadSheet(MultipartFile file) throws IOException {
		
		ICsvBeanReader beanReader = null;
		try
		{
//done as on 22-feb-2016  code to remove unwanted fields from list

			beanReader = new CsvBeanReader(new InputStreamReader(file.getInputStream()),
					CsvPreference.STANDARD_PREFERENCE);
			final String[] header = beanReader.getHeader(true);
			final CellProcessor[] processors = new CellProcessor[] { 
					new NotNull()
					,
					new NotNull()

			};

			TblBusiAssoMaster tblBusiAssoMaster=new TblBusiAssoMaster();
			while((tblBusiAssoMaster=beanReader.read(TblBusiAssoMaster.class, header,processors))!=null){

		
		 
			
			// done as on 19 feb 2016  save primary key default to temp
				String DUMMY="temp";

				tblBusiAssoMaster.setBuAsId(DUMMY);

			 	create(tblBusiAssoMaster);
			}
		}
		finally
		{
			if( beanReader != null ) {
                beanReader.close();
        	}
		}
		return true;
	}

@Override
public String printPDFBusinessAssoForm(String buasId, String receiptPk, HttpServletRequest request,
		HttpServletResponse response) {
	Connection connection=null;
	
	
	
	System.out.println("buasId : "+buasId);
	System.out.println("receiptPk : "+receiptPk);
	
	try {              
	 
		
		HashMap params = new HashMap();
		Object ridasIndia;
		
		params.put("param_buas_id", buasId);			
		params.put("param_receiptPk", receiptPk);
		
		HttpSession session = request.getSession();
		connection = tblBusiAssoMasterPersistence.myconnection();
		
		
		String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
		
		
	
		String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\businessAssociateEnrollment.jasper");
		
		JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
		
		String filename="report_"+buasId+".pdf";
		String reportSavePath=ImageSavePath+filename; 
		try {
			File filereport = new File(reportSavePath);
			if(filereport.exists())
			{
				filereport.delete();
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
		 String ImgPath = CommonUtil.getImagePathForWs(request, response);
        return ImgPath+filename;
//        		+ "//filename;
	}
	catch (Exception e) {
		
		e.printStackTrace();
	}
	finally
	{
		//done as on 17 mar 2016 to close database connection
		if(connection!=null){
			try {
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	return null;
}

@Override
public String printPDFBusinessAssoReceipt(String buasId, HttpServletRequest request, HttpServletResponse response) {
	Connection connection=null;
	System.out.println("buasId : "+buasId);
	
	try {              
				
		
		
		HashMap params = new HashMap();
		Object ridasIndia;
		
		params.put("param_buas_id", buasId);			
		
		
		HttpSession session = request.getSession();
		
	    connection = tblBusiAssoMasterPersistence.myconnection();
		
		String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
		
		String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\officialReceiptBusinessAssociate.jasper");
		
		JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
		
		String filename="report_"+buasId+".pdf";
		
		String reportSavePath=ImageSavePath+"\\"+filename; 
		System.out.println("filename "+filename);
		try {
			File filereport = new File(reportSavePath);
			if(filereport.exists())
			{
				filereport.delete();
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
		 String ImgPath = CommonUtil.getImagePathForWs(request, response);
	        return ImgPath+filename;

	}
	 catch (Exception e) {
		
		e.printStackTrace();
	}
	finally
	{
		//done as on 17 mar 2016 to close database connection
		if(connection!=null){
			try {
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	return null;
	}

@Override
public String printPDFAgreement(Integer age, String buasId, HttpServletRequest request, HttpServletResponse response) {
	Connection connection=null;
	System.out.println("buasId : "+buasId);
	
	try {      
		
		HashMap params = new HashMap();
		Object ridasIndia;
		
		params.put("param_buas_id", buasId);			
		params.put("age", age);	
		
		HttpSession session = request.getSession();
		 connection = tblBusiAssoMasterPersistence.myconnection();
			
			String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
			
			String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\businessAssociateAgreement.jasper");
		
		JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
		
		String filename="report_"+buasId+".pdf";
		
		String reportSavePath=ImageSavePath+"\\"+filename; 
		System.out.println("filename "+filename);
		try {
			File filereport = new File(reportSavePath);
			if(filereport.exists())
			{
				filereport.delete();
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
		String ImgPath = CommonUtil.getImagePathForWs(request, response);
        return ImgPath+filename;
	}
	catch (Exception e) {
		
		e.printStackTrace();
	}finally
	{
		//done as on 17 mar 2016 to close database connection
		if(connection!=null){
			try {
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	return null;
}

@Override
public String printPDFLetter(Integer age, String buasId, HttpServletRequest request,
		HttpServletResponse response) {
	
	Connection connection=null;
	System.out.println("buasId : "+buasId);
	
	try {
		
		HashMap params = new HashMap();
		Object ridasIndia;
		
		params.put("param_buas_id", buasId);			
		params.put("age", age);	
		
		HttpSession session = request.getSession();
		 connection = tblBusiAssoMasterPersistence.myconnection();
			
			String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
			
			String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\welcomeLetter.jasper");
		
		JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
		
		String filename="report_"+buasId+".pdf";
		
		String reportSavePath=ImageSavePath+"\\"+filename; 
		System.out.println("filename "+filename);
		try {
			File filereport = new File(reportSavePath);
			if(filereport.exists())
			{
				filereport.delete();
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
		String ImgPath = CommonUtil.getImagePathForWs(request, response);
        return ImgPath+filename;
	}
	 catch (Exception e) {
		
		e.printStackTrace();
	}
	finally
	{
		//done as on 17 mar 2016 to close database connection
		if(connection!=null){
			try {
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	return null;

}

@Override
public String printNewAgreementBusinessAssociate(Integer age, String buasId, HttpServletRequest request,
		HttpServletResponse response) {
	Connection connection=null;
	System.out.println("buasId : "+buasId);
	
	try {              
				
		
		HashMap params = new HashMap();
		Object ridasIndia;
		
		params.put("param_buas_id", buasId);			
		params.put("age", age);	
		
		HttpSession session = request.getSession();
		connection = tblBusiAssoMasterPersistence.myconnection();
		
		String ImageSavePath = CommonUtil.getImagePathForSave(request, response);
		
		String reportPath = session.getServletContext().getRealPath("\\WEB-INF\\reports\\businessAssociateAgreementNew.jasper");
		
		JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, params, connection);
		
		String filename="report_"+buasId+".pdf";
		
		String reportSavePath=ImageSavePath+"\\"+filename; 
		System.out.println("filename "+filename);
		try {
			File filereport = new File(reportSavePath);
			if(filereport.exists())
			{
				filereport.delete();
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		JasperExportManager.exportReportToPdfFile(jasperPrint, reportSavePath);//(jasperPrint,servletOutputStream);
		String ImgPath = CommonUtil.getImagePathForWs(request, response);
        return ImgPath+filename;
	}
	catch (Exception e) {
		
		e.printStackTrace();
	}
	finally
	{
		//done as on 17 mar 2016 to close database connection
		if(connection!=null){
			try {
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	return null;


}



}
