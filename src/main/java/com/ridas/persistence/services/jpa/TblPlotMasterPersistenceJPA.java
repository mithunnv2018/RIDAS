/*
 * Created on 29 Feb 2016 ( Time 17:46:07 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.ridas.persistence.services.jpa;


import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import com.ridas.bean.jpa.TblPlotMasterEntity;
import com.ridas.persistence.commons.jpa.GenericJpaService;
import com.ridas.persistence.commons.jpa.JpaOperation;
import com.ridas.persistence.services.TblPlotMasterPersistence;
import java.util.List;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;
import com.ridas.web.common.CustomUserDetails;

import org.hibernate.Session;
import org.hibernate.internal.SessionFactoryImpl;
import org.hibernate.service.jdbc.connections.spi.ConnectionProvider;
import org.springframework.security.core.context.SecurityContextHolder;

//done as on 17 feb 2016 import the related entities too.
import com.ridas.bean.jpa.TblPlotRecMasterEntity;
import com.ridas.bean.jpa.TblMembershipFormEntity;




/**
 * JPA implementation for basic persistence operations ( entity "TblPlotMaster" )
 * 
 * @author Telosys Tools Generator
 *
 */
public class TblPlotMasterPersistenceJPA extends GenericJpaService<TblPlotMasterEntity, Integer> implements TblPlotMasterPersistence {

	/**
	 * Constructor
	 */
	public TblPlotMasterPersistenceJPA() {
		super(TblPlotMasterEntity.class);
	}

	@Override
	public TblPlotMasterEntity load( Integer plotPk ) {
		return super.load( plotPk );
	}

	
	@Override
	public boolean delete( Integer plotPk ) {
	// done as on 17 feb 2016 commented below logic of deleting to dormant by new method above for making the dormant fields for related entities
		return deleteRelationships(plotPk);

	}

	@Override
	public boolean delete(TblPlotMasterEntity entity) {
		if ( entity != null ) {
		// done as on 17 feb 2016 commented below logic of deleting to dormant by new method above for making the dormant fields for related entities
			return deleteRelationships(entity.getPlotPk());
		}
		return false ;
	}

  /** done as on 17 feb 2016 delete the OnetoMany and OneToOne relations to dormant.
	*
	*/	
  private boolean deleteRelationships(final Integer pk)
  {
    JpaOperation operation = new JpaOperation() {
    @Override
   	public Object exectue(EntityManager em) throws PersistenceException {
    	final TblPlotMasterEntity entity = em.find(TblPlotMasterEntity.class, pk);
    	/*String entityname=TblSectorMasterEntity.class.getName();*/
    	entity.setStatus("dormant");
    	em.merge(entity);

		
 
		List<TblPlotRecMasterEntity> TblPlotRecMasterlist=entity.getListOfTblPlotRecMaster();
		for(int i=0;i<TblPlotRecMasterlist.size();i++)
		{
			TblPlotRecMasterEntity obj= TblPlotRecMasterlist.get(i);
			obj.setStatus("dormant");
			em.merge(obj);
		}
 

	    if (entity!=null) {
    			 //em.remove(entity);
     			return Boolean.TRUE ;
    		}
    		else {
     			return Boolean.FALSE ;
    		}
   		}
	  } ;
	  // JPA operation execution 
	  Boolean b = (Boolean) execute(operation, true) ;
	  return b.booleanValue();
 	}


	@Override
	public long countAll() {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				Query query = em.createNamedQuery("TblPlotMasterEntity.countAll");
				return query.getSingleResult() ;
			}
		} ;
		// JPA operation execution 
		return (Long) execute(operation);
	}

 	/**
	 * Save the given entity ( TRANSACTIONAL )
	 * @param TblPlotMasterEntity
	 * 
	 * @return
	 */
	@Override
	public TblPlotMasterEntity save(final TblPlotMasterEntity entityToSave) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {

				Boolean isnew=false;

//done as on 10 feb 2016 add condition to check if the table has auto increment if so hide the logic of manual key geenration.
 //else of check if table has auto increment.
				java.lang.Integer DUMMY=new java.lang.Integer(0+"");
				if(entityToSave.getPlotPk().equals(DUMMY))
				{
					isnew=true;
					entityToSave.setCreateDate(new Date());
				
				}
				else
				{
					isnew=false;
				}
				

//end of check if table has auto increment.
				//done as on 16 feb 2016 to save create date on save
				entityToSave.setStatus("active");
	    		CustomUserDetails userDetails =
       				(CustomUserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();

				entityToSave.setUserId(userDetails.getUserid());

    			entityToSave.setModifiedDate(new Date());
			
				TblPlotMasterEntity managedEntity = em.merge(entityToSave);
				return managedEntity;
			}
		} ;
		// JPA operation execution 
		return (TblPlotMasterEntity) execute(operation, true) ;
	}
	
	@Override
	public List<TblPlotMasterEntity> populatePlotNo(final String memberId) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final Query query = em.createQuery("select t from TblPlotMasterEntity t where t.tblMembershipForm.memberId='"+memberId+"' " );
				System.out.println(query.toString());
				return query.getResultList();
			}
		} ;
		// JPA operation execution 
		return (List<TblPlotMasterEntity>) execute(operation) ;
	}

	@Override
	public List<TblPlotMasterEntity> loadAllById(final Integer plotPk) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final Query query = em.createQuery("select t from TblPlotMasterEntity t where t.plotPk='"+plotPk+"' ");
				
				return query.getResultList();
			}
		} ;
		// JPA operation execution 
		return (List<TblPlotMasterEntity>) execute(operation) ;
	}

	public Connection connection;
	@Override
	public Connection myconnection(){
		JpaOperation operation = new JpaOperation() {
			

			@Override
			public Object exectue(EntityManager em) throws PersistenceException  {
				Session s = (Session) em.getDelegate();
				org.hibernate.SessionFactory sessionFactory=s.getSessionFactory();
				ConnectionProvider cp=((SessionFactoryImpl)sessionFactory).getConnectionProvider();
				try {
					 connection=cp.getConnection();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return null; 
			}
		} ;
		execute(operation);
		return connection;
		
	}

/**
	 * 	done as on 13 feb 2016 added for TblUserMaster for retrieving user details for login
    */
}
