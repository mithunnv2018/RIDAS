/*
 * Created on 18 Mar 2016 ( Time 11:54:54 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.ridas.persistence.services.jpa;


import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import com.ridas.bean.jpa.TblRtgsPaidDetailsEntity;
import com.ridas.persistence.commons.jpa.GenericJpaService;
import com.ridas.persistence.commons.jpa.JpaOperation;
import com.ridas.persistence.services.TblRtgsPaidDetailsPersistence;
import java.util.List;
import java.util.Date;
import com.ridas.web.common.CustomUserDetails;
import org.springframework.security.core.context.SecurityContextHolder;

import com.ridas.bean.jpa.TblPlotMasterEntity;
//done as on 17 feb 2016 import the related entities too.
import com.ridas.bean.jpa.TblReceiptMasterEntity;




/**
 * JPA implementation for basic persistence operations ( entity "TblRtgsPaidDetails" )
 * 
 * @author Telosys Tools Generator
 *
 */
public class TblRtgsPaidDetailsPersistenceJPA extends GenericJpaService<TblRtgsPaidDetailsEntity, Integer> implements TblRtgsPaidDetailsPersistence {

	/**
	 * Constructor
	 */
	public TblRtgsPaidDetailsPersistenceJPA() {
		super(TblRtgsPaidDetailsEntity.class);
	}

	@Override
	public TblRtgsPaidDetailsEntity load( Integer rtgsDetailsId ) {
		return super.load( rtgsDetailsId );
	}

	@Override
	public boolean delete( Integer rtgsDetailsId ) {
	// done as on 17 feb 2016 commented below logic of deleting to dormant by new method above for making the dormant fields for related entities
		return deleteRelationships(rtgsDetailsId);

	}

	@Override
	public boolean delete(TblRtgsPaidDetailsEntity entity) {
		if ( entity != null ) {
		// done as on 17 feb 2016 commented below logic of deleting to dormant by new method above for making the dormant fields for related entities
			return deleteRelationships(entity.getRtgsDetailsId());
		}
		return false ;
	}

  /** done as on 17 feb 2016 delete the OnetoMany and OneToOne relations to dormant.
	*
	*/	
  private boolean deleteRelationships(final Integer pk)
  {
    JpaOperation operation = new JpaOperation() {
    @Override
   	public Object exectue(EntityManager em) throws PersistenceException {
    	final TblRtgsPaidDetailsEntity entity = em.find(TblRtgsPaidDetailsEntity.class, pk);
    	/*String entityname=TblSectorMasterEntity.class.getName();*/
    	entity.setStatus("dormant");
    	em.merge(entity);


	    if (entity!=null) {
    			 //em.remove(entity);
     			return Boolean.TRUE ;
    		}
    		else {
     			return Boolean.FALSE ;
    		}
   		}
	  } ;
	  // JPA operation execution 
	  Boolean b = (Boolean) execute(operation, true) ;
	  return b.booleanValue();
 	}


	@Override
	public long countAll() {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				Query query = em.createNamedQuery("TblRtgsPaidDetailsEntity.countAll");
				return query.getSingleResult() ;
			}
		} ;
		// JPA operation execution 
		return (Long) execute(operation);
	}

 	/**
	 * Save the given entity ( TRANSACTIONAL )
	 * @param TblRtgsPaidDetailsEntity
	 * 
	 * @return
	 */
	@Override
	public TblRtgsPaidDetailsEntity save(final TblRtgsPaidDetailsEntity entityToSave) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {

				Boolean isnew=false;

//done as on 10 feb 2016 add condition to check if the table has auto increment if so hide the logic of manual key geenration.
 //else of check if table has auto increment.
				java.lang.Integer DUMMY=new java.lang.Integer(0+"");
				if(entityToSave.getRtgsDetailsId().equals(DUMMY))
				{
					isnew=true;
					entityToSave.setCreateDate(new Date());
				
				}
				else
				{
					isnew=false;
				}
				

//end of check if table has auto increment.
				//done as on 16 feb 2016 to save create date on save
				entityToSave.setStatus("active");
	    		try {
					/*CustomUserDetails userDetails =
						(CustomUserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
*/
					entityToSave.setUserId("user1");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

    			entityToSave.setModifiedDate(new Date());
			
				TblRtgsPaidDetailsEntity managedEntity = em.merge(entityToSave);
				return managedEntity;
			}
		} ;
		// JPA operation execution 
		return (TblRtgsPaidDetailsEntity) execute(operation, true) ;
	}
/**
	 * 	done as on 13 feb 2016 added for TblUserMaster for retrieving user details for login
    */
	 String q="";
	@Override
	public List<TblReceiptMasterEntity> loadAllByProfit(Integer profit) {
		
			System.out.println("profit : "+profit);
			if(profit==15) 
			{
			q ="SELECT r FROM TblReceiptMasterEntity r,TblMembershipFormEntity m WHERE m.memberId=r.tblMembershipForm.memberId AND DAY(r.receiptCurrentdate)<=15 AND r.receiptType ='businessassociate' ORDER BY r.receiptCurrentdate ASC";
			}
			else if(profit==25)
			{
			q ="SELECT r FROM TblReceiptMasterEntity r,TblMembershipFormEntity m WHERE m.memberId=r.tblMembershipForm.memberId AND DAY(r.receiptCurrentdate)>15 AND r.receiptType ='businessassociate' ORDER BY r.receiptCurrentdate ASC";
			}
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final Query query = em.createQuery(q);
				
				System.out.println(query.toString());
				List resultList = query.getResultList();
				System.out.println("resultList : "+resultList.toString());
				return resultList;
			}
		} ;
		// JPA operation execution 
		return (List<TblReceiptMasterEntity>) execute(operation) ;
	}

	@Override
	public List<TblRtgsPaidDetailsEntity> findAllByYear(String paramyear) {
		System.out.println("paramyear : "+paramyear);
		 final String p ="SELECT SUM(r.receiptProfitFrom), r.month, r.memberId, m.memberName FROM TblRtgsPaidDetailsEntity r,TblMembershipFormEntity m WHERE r.year='"+paramyear+"' AND r.memberId=m.memberId GROUP BY m.memberId, r.month  ORDER BY m.memberId, r.month";
		
	JpaOperation operation = new JpaOperation() {
		@Override
		public Object exectue(EntityManager em) throws PersistenceException {
			final Query query = em.createQuery(p);
			
			System.out.println(query.toString());
			List resultList = query.getResultList();
			System.out.println("resultList : "+resultList.toString());
			return resultList;
		}
	} ;
	// JPA operation execution 
	return (List<TblRtgsPaidDetailsEntity>) execute(operation) ;
	}
}
