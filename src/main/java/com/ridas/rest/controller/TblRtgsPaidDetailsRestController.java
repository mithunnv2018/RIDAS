/*
 * Created on 18 Mar 2016 ( Time 11:54:38 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.rest.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ridas.bean.TblRtgsPaidDetails;
import com.ridas.business.service.TblRtgsPaidDetailsService;
import com.ridas.web.listitem.TblRtgsPaidDetailsListItem;

/**
 * Spring MVC controller for 'TblRtgsPaidDetails' management.
 */
@Controller
public class TblRtgsPaidDetailsRestController {

	@Resource
	private TblRtgsPaidDetailsService tblRtgsPaidDetailsService;
	
	@RequestMapping( value="/items/tblRtgsPaidDetails",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<TblRtgsPaidDetailsListItem> findAllAsListItems() {
		List<TblRtgsPaidDetails> list = tblRtgsPaidDetailsService.findAll();
		List<TblRtgsPaidDetailsListItem> items = new LinkedList<TblRtgsPaidDetailsListItem>();
		for ( TblRtgsPaidDetails tblRtgsPaidDetails : list ) {
			items.add(new TblRtgsPaidDetailsListItem( tblRtgsPaidDetails ) );
		}
		return items;
	}
	
	@RequestMapping( value="/tblRtgsPaidDetails",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<TblRtgsPaidDetails> findAll() {
		return tblRtgsPaidDetailsService.findAll();
	}

	@RequestMapping( value="/tblRtgsPaidDetails/{rtgsDetailsId}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public TblRtgsPaidDetails findOne(@PathVariable("rtgsDetailsId") Integer rtgsDetailsId) {
		return tblRtgsPaidDetailsService.findById(rtgsDetailsId);
	}
	
	@RequestMapping( value="/tblRtgsPaidDetails",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public TblRtgsPaidDetails create(@RequestBody TblRtgsPaidDetails tblRtgsPaidDetails) {
		return tblRtgsPaidDetailsService.create(tblRtgsPaidDetails);
	}

	@RequestMapping( value="/tblRtgsPaidDetails/{rtgsDetailsId}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public TblRtgsPaidDetails update(@PathVariable("rtgsDetailsId") Integer rtgsDetailsId, @RequestBody TblRtgsPaidDetails tblRtgsPaidDetails) {
		return tblRtgsPaidDetailsService.update(tblRtgsPaidDetails);
	}

	@RequestMapping( value="/tblRtgsPaidDetails/{rtgsDetailsId}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("rtgsDetailsId") Integer rtgsDetailsId) {
		tblRtgsPaidDetailsService.delete(rtgsDetailsId);
	}
	
	@RequestMapping( value="/tblRtgsPaidDetails/populateGrid",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List populateGrid(@RequestParam("profit") Integer profit, HttpServletRequest request,HttpServletResponse response) {
		
		try {
			System.out.println("populateGrid : "+profit);         
			System.out.println("profit : "+profit);
					List dataForpopulateGrid = tblRtgsPaidDetailsService.findAllByProfit(profit);
					System.out.println("dataForpopulateGrid : "+dataForpopulateGrid.toString());
					    ObjectMapper objectMapper = new ObjectMapper();
					    HashMap hashMap = new HashMap();
					    hashMap.put("result", dataForpopulateGrid);
					    String writeValueAsString = objectMapper.writeValueAsString(hashMap);
					 
				return dataForpopulateGrid;
			
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			
			return null;
	}
	
	@RequestMapping( value="/tblRtgsPaidDetails/saveGrid",
			method = RequestMethod.POST
			)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public String saveGrid(@RequestParam Map<String, Object>  reqPar) {
		System.out.println(reqPar);
		Integer profit=Integer.parseInt((String) reqPar.get("profit"));
		String month = (String) reqPar.get("month");
		String year = (String) reqPar.get("year");
		String gridObject = (String) reqPar.get("data");
		System.out.println("gridObject : "+gridObject);
		ObjectMapper objectMapper = new ObjectMapper();
		JsonNode readValue=null;
		 
			System.out.println("Data=>>"+gridObject);
			try {
//				readValue = objectMapper.readValue(gridObject,JsonNode.class);
				readValue=objectMapper.readTree(gridObject);
				TblRtgsPaidDetails tblRtgsPaidDetails=new TblRtgsPaidDetails();
				java.lang.Integer DUMMY=new java.lang.Integer(0+"");

				

				
				for(int i=0;i<readValue.size();i++)
				{
					JsonNode jsonNode = readValue.get(i);
					String receiptPk=jsonNode.get("receiptPk").asText();
					String markaspaid=jsonNode.get("markaspaid").asText();
					String receiptProfitFrom=jsonNode.get("receiptProfitFrom").asText();
					String memberId=jsonNode.get("memberId").asText();
					String receiptAmount=jsonNode.get("receiptAmount").asText();
					
					
					System.out.println(i+"receiptpk="+receiptPk+" markaspaid="+markaspaid);
					tblRtgsPaidDetails.setRtgsDetailsId(DUMMY);
					tblRtgsPaidDetails.setReceiptPk(receiptPk);
					tblRtgsPaidDetails.setPaid(markaspaid);
					tblRtgsPaidDetails.setMonth(month);
					tblRtgsPaidDetails.setYear(year);
					tblRtgsPaidDetails.setMemberId(memberId);
					tblRtgsPaidDetails.setReceiptAmount(Double.parseDouble(receiptAmount));
					tblRtgsPaidDetails.setReceiptProfitFrom(Double.parseDouble(receiptProfitFrom));
					tblRtgsPaidDetailsService.create(tblRtgsPaidDetails); 
				}
				
				
			} catch (JsonParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (JsonMappingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		 
		System.out.println("Read value Size="+readValue.size());
		return "Data Saved Successfully";
	}

	
	@RequestMapping( value="/printRTGSReport",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public String printRTGSReport(@RequestParam("profit") String  profit, HttpServletRequest request,HttpServletResponse response) {
		
		try {
			System.out.println("..profit : "+profit);
				if (profit != null) {
					
					
					
				String PDFReceiptReport = tblRtgsPaidDetailsService.printRTGSReport(profit, request, response);
				System.out.println("..PDFReceiptReport : "+PDFReceiptReport);
				
				  ObjectMapper objectMapper = new ObjectMapper();
				    HashMap hashMap = new HashMap();
				    hashMap.put("result", PDFReceiptReport);
				    String writeValueAsString = objectMapper.writeValueAsString(hashMap);
				 // return "{\"result\":\""+PDFReceiptReport+"\"}";//writeValueAsString;
			return writeValueAsString;
				}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			
			return null;
	}
	
	
	

	@RequestMapping( value="/printMonthlyRTGSReport",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public String printMonthlyRTGSReport(@RequestParam Map<String, String>  reqPar, HttpServletRequest request,HttpServletResponse response) {
		
		String paramprofit = reqPar.get("paramprofit");
		String parammonth = reqPar.get("parammonth");
		String paramyear = reqPar.get("paramyear");
		String parampaid = reqPar.get("parampaid");
		
		try {
			System.out.println("..profit : "+paramprofit+" month :"+parammonth+" year : "+paramyear+" paid : "+parampaid);
				if (paramprofit != null) {
					
					
					
				String PDFReceiptReport = tblRtgsPaidDetailsService.printMonthlyRTGSReport(paramprofit, parammonth, paramyear, parampaid, request, response);
				System.out.println("..PDFReceiptReport : "+PDFReceiptReport);
				
				  ObjectMapper objectMapper = new ObjectMapper();
				    HashMap hashMap = new HashMap();
				    hashMap.put("result", PDFReceiptReport);
				    String writeValueAsString = objectMapper.writeValueAsString(hashMap);
				 // return "{\"result\":\""+PDFReceiptReport+"\"}";//writeValueAsString;
			return writeValueAsString;
				}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			
			return null;
	}
		
	
	
	@RequestMapping( value="/printYearlyRTGSReport",
	method = RequestMethod.GET,
	produces = MediaType.APPLICATION_JSON_VALUE)
@ResponseStatus(HttpStatus.OK)
@ResponseBody
public String printYearlyRTGSReport(@RequestParam("paramyear") String  paramyear, HttpServletRequest request,HttpServletResponse response) {

try {
	System.out.println("..profit : "+paramyear);
		if (paramyear != null) {
			
			
			String PDFExcelReport =  tblRtgsPaidDetailsService.findAllByYear(paramyear, request, response);
           
		    System.out.println("..PDFReceiptReport : "+PDFExcelReport);
		
		  ObjectMapper objectMapper = new ObjectMapper();
		    HashMap hashMap = new HashMap();
		    hashMap.put("result", PDFExcelReport);
		    String writeValueAsString = objectMapper.writeValueAsString(hashMap);
		 // return "{\"result\":\""+PDFReceiptReport+"\"}";//writeValueAsString;
	return writeValueAsString;
		}
	} catch (Exception e) {
		
		e.printStackTrace();
	}
	
	return null;
}

}
