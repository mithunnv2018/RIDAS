/*
 * Created on 29 Feb 2016 ( Time 17:45:57 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.rest.controller;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ridas.bean.TblReceiptMaster;
import com.ridas.business.service.TblReceiptMasterService;
import com.ridas.web.common.AbstractController;
import com.ridas.web.listitem.TblReceiptMasterListItem;

import bussinessapi.AmountByWord;

/**
 * Spring MVC controller for 'TblReceiptMaster' management.
 */
@Controller
public class TblReceiptMasterRestController {

	@Resource
	private TblReceiptMasterService tblReceiptMasterService;
	
	@RequestMapping( value="/items/tblReceiptMaster",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<TblReceiptMasterListItem> findAllAsListItems() {
		List<TblReceiptMaster> list = tblReceiptMasterService.findAll();
		List<TblReceiptMasterListItem> items = new LinkedList<TblReceiptMasterListItem>();
		for ( TblReceiptMaster tblReceiptMaster : list ) {
			items.add(new TblReceiptMasterListItem( tblReceiptMaster ) );
		}
		return items;
	}
	
	@RequestMapping( value="/tblReceiptMaster",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<TblReceiptMaster> findAll() {
		return tblReceiptMasterService.findAll();
	}

	@RequestMapping( value="/tblReceiptMaster/{receiptPk}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public TblReceiptMaster findOne(@PathVariable("receiptPk") String receiptPk) {
		return tblReceiptMasterService.findById(receiptPk);
	}
	
	@RequestMapping( value="/tblReceiptMaster",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public TblReceiptMaster create(@RequestBody TblReceiptMaster tblReceiptMaster) {
		return tblReceiptMasterService.create(tblReceiptMaster);
	}

	@RequestMapping( value="/tblReceiptMaster/{receiptPk}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public TblReceiptMaster update(@PathVariable("receiptPk") String receiptPk, @RequestBody TblReceiptMaster tblReceiptMaster) {
		return tblReceiptMasterService.update(tblReceiptMaster);
	}

	@RequestMapping( value="/tblReceiptMaster/{receiptPk}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("receiptPk") String receiptPk) {
		tblReceiptMasterService.delete(receiptPk);
	}
	
	@RequestMapping( value="/tblReceiptMaster/create",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public TblReceiptMaster create2(@RequestBody TblReceiptMaster tblReceiptMaster) {
		
			try {
				/*if (!bindingResult.hasErrors()) 
				{*/

					// done as on 06 feb 2016  save primary key default to temp
					String DUMMY="temp";

					/*
					 * done as on 27 feb 2016 
					 */
					Double receiptAmount = tblReceiptMaster.getReceiptAmount();
					
					tblReceiptMaster.setReceiptPk(DUMMY);

					 AmountByWord amountByWord = new AmountByWord();
				      amountByWord.setLanguage("en");
				      amountByWord.setCurrency("IN");

				      
				    String amountinword = amountByWord.getAmountByWord(receiptAmount);
				    
				    
				    amountinword=AbstractController.capitalizeAmount(amountinword);

				    tblReceiptMaster.setReceiptAmountinwords(amountinword);
				    
					
					TblReceiptMaster tblReceiptMasterCreated = tblReceiptMasterService.create(tblReceiptMaster); 
					return tblReceiptMasterCreated;
					
//}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
	}
	
	
	@RequestMapping( value="/printMembershipForm",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public String printMembershipForm(@RequestParam Map<String, String>  reqPar, HttpServletRequest request,HttpServletResponse response) {
		
		try {
				        System.out.println("ReceiptController.printMembershipForm()");
						String memberId = reqPar.get("memberId");
						String param_chequenumber = reqPar.get("param_chequenumber");
						String chequedate =reqPar.get("param_chequedate");
						System.out.println("chequedate ::::"+chequedate);
						String chequedateNew="";
					
					 if(chequedate!=null && chequedate.isEmpty()==false)
					 {
					  SimpleDateFormat sdf1 = new SimpleDateFormat("MM/dd/yyyy");
					  SimpleDateFormat sdf2 = new SimpleDateFormat("dd/MM/yyyy");
					  chequedateNew = sdf2.format(sdf1.parse(chequedate));
					 }
					  
					  System.out.println("chequedateNew ::::"+chequedateNew);
					  
					String param_chequebank = reqPar.get("param_chequebank");
					String receiptPk =reqPar.get("receiptPk");
					//Serializable receiptPk = receiptDao.saveSerializable(receipt);
					String PDFReceiptReport = tblReceiptMasterService.printPDFMembershipForm(memberId,param_chequenumber,chequedateNew,param_chequebank,receiptPk, request, response);
				    System.out.println("..PDFReceiptReport : "+PDFReceiptReport);
				   
				    ObjectMapper objectMapper = new ObjectMapper();
				    HashMap hashMap = new HashMap();
				    hashMap.put("result", PDFReceiptReport);
				    String writeValueAsString = objectMapper.writeValueAsString(hashMap);
				 // return "{\"result\":\""+PDFReceiptReport+"\"}";//writeValueAsString;
			return writeValueAsString;
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			
			return null;
	}
		
	
	@RequestMapping( value="/printReceipt",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public String printReceipt(@RequestParam("receiptPk") String  receiptPk, HttpServletRequest request,HttpServletResponse response) {
		
		try {
			System.out.println("..receiptPk : "+receiptPk);
				if (receiptPk != null) {
					
					
				String PDFReceiptReport = tblReceiptMasterService.printPDFReceipt(receiptPk, request, response);
				System.out.println("..PDFReceiptReport : "+PDFReceiptReport);
				
				  ObjectMapper objectMapper = new ObjectMapper();
				    HashMap hashMap = new HashMap();
				    hashMap.put("result", PDFReceiptReport);
				    String writeValueAsString = objectMapper.writeValueAsString(hashMap);
				 // return "{\"result\":\""+PDFReceiptReport+"\"}";//writeValueAsString;
			return writeValueAsString;
				}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
			
			return null;
	}
}
