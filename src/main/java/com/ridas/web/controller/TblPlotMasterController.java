

/*
 * Created on 29 Feb 2016 ( Time 17:45:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.web.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
//done as on 2 feb 2016
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ridas.bean.TblMembershipForm;
//--- Entities
import com.ridas.bean.TblPlotMaster;
import com.ridas.business.service.TblMembershipFormService;
//--- Services 
import com.ridas.business.service.TblPlotMasterService;
//--- Common classes
import com.ridas.web.common.AbstractController;
import com.ridas.web.common.FormMode;
import com.ridas.web.common.Message;
import com.ridas.web.common.MessageType;
//--- List Items 
import com.ridas.web.listitem.TblMembershipFormListItem;

/**
 * Spring MVC controller for 'TblPlotMaster' management.
 */
@Controller
@RequestMapping("/tblPlotMaster")
public class TblPlotMasterController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "tblPlotMaster";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "tblPlotMaster/form";
	private static final String JSP_LIST   = "tblPlotMaster/list";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/tblPlotMaster/create";
	private static final String SAVE_ACTION_UPDATE   = "/tblPlotMaster/update";

	//--done as on 19 feb 2016 to import CSV FILE Logic
	private static final String XLS_ACTION_UPLOAD = "fileImportAction";
	private static final String XLS_ACTION_UPLOAD_URL = "/tblPlotMaster/csvimport";
	private static final String JSP_SHOW_IMPORT_PAGE = "tblPlotMaster/fileimport";
	
	//--- Main entity service
	@Resource
    private TblPlotMasterService tblPlotMasterService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private TblMembershipFormService tblMembershipFormService; // Injected by Spring

	//done as on 2 feb 2016
	static final String folderName="TblPlotMaster";
	private MultipartFile file2=null;
//done as on 19 feb 2016 added logic for csv file import
	private MultipartFile fileimport2 = null;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public TblPlotMasterController() {
		super(TblPlotMasterController.class, MAIN_ENTITY_NAME );
		log("TblPlotMasterController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------
	/**
	 * Populates the combo-box "items" for the referenced entity "TblMembershipForm"
	 * @param model
	 */
	private void populateListOfTblMembershipFormItems(Model model) {
		List<TblMembershipForm> list = tblMembershipFormService.findAll();
		List<TblMembershipFormListItem> items = new LinkedList<TblMembershipFormListItem>();
		for ( TblMembershipForm tblMembershipForm : list ) {
			items.add(new TblMembershipFormListItem( tblMembershipForm ) );
		}
		model.addAttribute("listOfTblMembershipFormItems", items ) ;
	}


	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param tblPlotMaster
	 */
	private void populateModel(Model model, TblPlotMaster tblPlotMaster, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, tblPlotMaster);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
			populateListOfTblMembershipFormItems(model);
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
			populateListOfTblMembershipFormItems(model);
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of TblPlotMaster found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(Model model) {
		log("Action 'list'");
		List<TblPlotMaster> list = tblPlotMasterService.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);		
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new TblPlotMaster
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		TblPlotMaster tblPlotMaster = new TblPlotMaster();	

// done as on 10 feb 2016  save primary key default to temp
				java.lang.Integer DUMMY=new java.lang.Integer(0+"");
		tblPlotMaster.setPlotPk(DUMMY);

		populateModel( model, tblPlotMaster, FormMode.CREATE);


		//done as on 2 feb 2016
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing TblPlotMaster
	 * @param model Spring MVC model
	 * @param plotPk  primary key element
	 * @return
	 */
	@RequestMapping(value = "/form/{plotPk}")
	public String formForUpdate(Model model, @PathVariable("plotPk") Integer plotPk ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		TblPlotMaster tblPlotMaster = tblPlotMasterService.findById(plotPk);
		populateModel( model, tblPlotMaster, FormMode.UPDATE);		
		return JSP_FORM;
	}

	
	
	
	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param tblPlotMaster  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(@Valid TblPlotMaster tblPlotMaster, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) {
		//done as on 2 feb 2016
		//ADD PARAMS HttpServletResponse httpServletResponse

		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {

				

// done as on 06 feb 2016  save primary key default to temp
				java.lang.Integer DUMMY=new java.lang.Integer(0+"");

				tblPlotMaster.setPlotPk(DUMMY);

				TblPlotMaster tblPlotMasterCreated = tblPlotMasterService.create(tblPlotMaster); 
				model.addAttribute(MAIN_ENTITY_NAME, tblPlotMasterCreated);

				
				//---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				// done as on 06 feb 2016  introduced a new getter for getting the primary key of the newly created Bean coming after saved.
				return redirectToForm(httpServletRequest, tblPlotMasterCreated.getPlotPk() );
				//return redirectToForm(httpServletRequest, tblPlotMaster.getPlotPk() );
			} else {
				populateModel( model, tblPlotMaster, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "tblPlotMaster.error.create", e);
			populateModel( model, tblPlotMaster, FormMode.CREATE);
			return JSP_FORM;
		}
	}
	
	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param tblPlotMaster  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update" ) // GET or POST
	public String update(@Valid TblPlotMaster tblPlotMaster, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) {
	//done as on 2 feb 2016
	//ADD PARAMS HttpServletResponse httpServletResponse
		
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {

				
				//--- Perform database operations
				TblPlotMaster tblPlotMasterSaved = tblPlotMasterService.update(tblPlotMaster);
				model.addAttribute(MAIN_ENTITY_NAME, tblPlotMasterSaved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, tblPlotMaster.getPlotPk());
			
				
				
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, tblPlotMaster, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "tblPlotMaster.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, tblPlotMaster, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
	 * @param plotPk  primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{plotPk}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, @PathVariable("plotPk") Integer plotPk) {
		log("Action 'delete'" );
		try {
			tblPlotMasterService.delete( plotPk );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "tblPlotMaster.error.delete", e);
		}
		return redirectToList();
	}

	@RequestMapping("/formforcsvimport2")
	public String formForExcelImport(Model model) {
		log("Action 'formforexcelimport'");
		// --- Populates the model with a new instance
		TblPlotMaster tblPlotMaster = new TblPlotMaster();

		// done as on 19 feb 2016  save primary key default to temp
				java.lang.Integer DUMMY=new java.lang.Integer(0+"");

		tblPlotMaster.setPlotPk(DUMMY);


		model.addAttribute("fileimport2", fileimport2);
		 
		model.addAttribute(XLS_ACTION_UPLOAD, XLS_ACTION_UPLOAD_URL);

		// done as on 2 feb 2016
		return JSP_SHOW_IMPORT_PAGE;
	}

	@RequestMapping("/csvimport")
	public String excelimport(TblPlotMaster tblPlotMaster, BindingResult bindingResult, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest,
			HttpServletResponse httpServletResponse) {
		 
		log("Action 'csvuploading'");
		try {
			if (!bindingResult.hasErrors()) {

				 
				file2 = (MultipartFile) ((DefaultMultipartHttpServletRequest) httpServletRequest).getFile("fileimport2");
				if (file2.isEmpty() == false) {
 					String productPdfFileName = file2.getOriginalFilename();
					 
 					String contenttype = file2.getContentType();
 					
 					tblPlotMasterService.doImportExcelSpreadSheet(file2);	
 
				}
			}
		} catch (Exception e) {
			log("Action 'CSVImport' : Exception - " + e.getMessage());
			messageHelper.addException(model, "tblPlotMaster.error.create", e);	
		}
		return "redirect:/"+MAIN_ENTITY_NAME;
	}
}
