/*
 * Created on 29 Feb 2016 ( Time 17:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.ridas.bean.TblReceiptMaster;
import com.ridas.bean.jpa.TblReceiptMasterEntity;
import com.ridas.bean.jpa.TblMembershipFormEntity;
import com.ridas.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TblReceiptMasterServiceMapperTest {

	private TblReceiptMasterServiceMapper tblReceiptMasterServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		tblReceiptMasterServiceMapper = new TblReceiptMasterServiceMapper();
		tblReceiptMasterServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TblReceiptMasterEntity' to 'TblReceiptMaster'
	 * @param tblReceiptMasterEntity
	 */
	@Test
	public void testMapTblReceiptMasterEntityToTblReceiptMaster() {
		// Given
		TblReceiptMasterEntity tblReceiptMasterEntity = new TblReceiptMasterEntity();
		tblReceiptMasterEntity.setReceiptAmount(mockValues.nextDouble());
		tblReceiptMasterEntity.setReceiptModeofpayment(mockValues.nextString(100));
		tblReceiptMasterEntity.setReceiptAmountinwords(mockValues.nextString(500));
		tblReceiptMasterEntity.setReceiptOtherdetails(mockValues.nextString(255));
		tblReceiptMasterEntity.setReceiptCurrentdate(mockValues.nextDate());
		tblReceiptMasterEntity.setReceiptType(mockValues.nextString(500));
		tblReceiptMasterEntity.setReceiptBank(mockValues.nextString(50));
		tblReceiptMasterEntity.setReceiptChequedate(mockValues.nextDate());
		tblReceiptMasterEntity.setReceiptDrawnon(mockValues.nextString(50));
		tblReceiptMasterEntity.setReceiptBranch(mockValues.nextString(500));
		tblReceiptMasterEntity.setReceiptCity(mockValues.nextString(100));
		tblReceiptMasterEntity.setReceiptAtproject(mockValues.nextString(100));
		tblReceiptMasterEntity.setReceiptPlace(mockValues.nextString(50));
		tblReceiptMasterEntity.setReceiptProfitFrom(mockValues.nextDouble());
		tblReceiptMasterEntity.setReceiptProfitTo(mockValues.nextDouble());
		tblReceiptMasterEntity.setReceiptSecurityChequeNo(mockValues.nextString(100));
		tblReceiptMasterEntity.setReceiptSecurityChequeDate(mockValues.nextDate());
		tblReceiptMasterEntity.setReceiptSecurityChequeDrawnon(mockValues.nextString(1000));
		tblReceiptMasterEntity.setReceiptSecurityChequeAddress(mockValues.nextString(1000));
		tblReceiptMasterEntity.setCountpk(mockValues.nextLong());
		tblReceiptMasterEntity.setPrefixcolumn(mockValues.nextString(100));
		tblReceiptMasterEntity.setCreateDate(mockValues.nextDate());
		tblReceiptMasterEntity.setModifiedDate(mockValues.nextDate());
		tblReceiptMasterEntity.setStatus(mockValues.nextString(100));
		tblReceiptMasterEntity.setUserId(mockValues.nextString(100));
		tblReceiptMasterEntity.setTblMembershipForm(new TblMembershipFormEntity());
		tblReceiptMasterEntity.getTblMembershipForm().setMemberId(mockValues.nextString(50));
		
		// When
		TblReceiptMaster tblReceiptMaster = tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity);
		
		// Then
		assertEquals(tblReceiptMasterEntity.getReceiptAmount(), tblReceiptMaster.getReceiptAmount());
		assertEquals(tblReceiptMasterEntity.getReceiptModeofpayment(), tblReceiptMaster.getReceiptModeofpayment());
		assertEquals(tblReceiptMasterEntity.getReceiptAmountinwords(), tblReceiptMaster.getReceiptAmountinwords());
		assertEquals(tblReceiptMasterEntity.getReceiptOtherdetails(), tblReceiptMaster.getReceiptOtherdetails());
		assertEquals(tblReceiptMasterEntity.getReceiptCurrentdate(), tblReceiptMaster.getReceiptCurrentdate());
		assertEquals(tblReceiptMasterEntity.getReceiptType(), tblReceiptMaster.getReceiptType());
		assertEquals(tblReceiptMasterEntity.getReceiptBank(), tblReceiptMaster.getReceiptBank());
		assertEquals(tblReceiptMasterEntity.getReceiptChequedate(), tblReceiptMaster.getReceiptChequedate());
		assertEquals(tblReceiptMasterEntity.getReceiptDrawnon(), tblReceiptMaster.getReceiptDrawnon());
		assertEquals(tblReceiptMasterEntity.getReceiptBranch(), tblReceiptMaster.getReceiptBranch());
		assertEquals(tblReceiptMasterEntity.getReceiptCity(), tblReceiptMaster.getReceiptCity());
		assertEquals(tblReceiptMasterEntity.getReceiptAtproject(), tblReceiptMaster.getReceiptAtproject());
		assertEquals(tblReceiptMasterEntity.getReceiptPlace(), tblReceiptMaster.getReceiptPlace());
		assertEquals(tblReceiptMasterEntity.getReceiptProfitFrom(), tblReceiptMaster.getReceiptProfitFrom());
		assertEquals(tblReceiptMasterEntity.getReceiptProfitTo(), tblReceiptMaster.getReceiptProfitTo());
		assertEquals(tblReceiptMasterEntity.getReceiptSecurityChequeNo(), tblReceiptMaster.getReceiptSecurityChequeNo());
		assertEquals(tblReceiptMasterEntity.getReceiptSecurityChequeDate(), tblReceiptMaster.getReceiptSecurityChequeDate());
		assertEquals(tblReceiptMasterEntity.getReceiptSecurityChequeDrawnon(), tblReceiptMaster.getReceiptSecurityChequeDrawnon());
		assertEquals(tblReceiptMasterEntity.getReceiptSecurityChequeAddress(), tblReceiptMaster.getReceiptSecurityChequeAddress());
		assertEquals(tblReceiptMasterEntity.getCountpk(), tblReceiptMaster.getCountpk());
		assertEquals(tblReceiptMasterEntity.getPrefixcolumn(), tblReceiptMaster.getPrefixcolumn());
		assertEquals(tblReceiptMasterEntity.getCreateDate(), tblReceiptMaster.getCreateDate());
		assertEquals(tblReceiptMasterEntity.getModifiedDate(), tblReceiptMaster.getModifiedDate());
		assertEquals(tblReceiptMasterEntity.getStatus(), tblReceiptMaster.getStatus());
		assertEquals(tblReceiptMasterEntity.getUserId(), tblReceiptMaster.getUserId());
		assertEquals(tblReceiptMasterEntity.getTblMembershipForm().getMemberId(), tblReceiptMaster.getMemberId());
	}
	
	/**
	 * Test : Mapping from 'TblReceiptMaster' to 'TblReceiptMasterEntity'
	 */
	@Test
	public void testMapTblReceiptMasterToTblReceiptMasterEntity() {
		// Given
		TblReceiptMaster tblReceiptMaster = new TblReceiptMaster();
		tblReceiptMaster.setReceiptAmount(mockValues.nextDouble());
		tblReceiptMaster.setReceiptModeofpayment(mockValues.nextString(100));
		tblReceiptMaster.setReceiptAmountinwords(mockValues.nextString(500));
		tblReceiptMaster.setReceiptOtherdetails(mockValues.nextString(255));
		tblReceiptMaster.setReceiptCurrentdate(mockValues.nextDate());
		tblReceiptMaster.setReceiptType(mockValues.nextString(500));
		tblReceiptMaster.setReceiptBank(mockValues.nextString(50));
		tblReceiptMaster.setReceiptChequedate(mockValues.nextDate());
		tblReceiptMaster.setReceiptDrawnon(mockValues.nextString(50));
		tblReceiptMaster.setReceiptBranch(mockValues.nextString(500));
		tblReceiptMaster.setReceiptCity(mockValues.nextString(100));
		tblReceiptMaster.setReceiptAtproject(mockValues.nextString(100));
		tblReceiptMaster.setReceiptPlace(mockValues.nextString(50));
		tblReceiptMaster.setReceiptProfitFrom(mockValues.nextDouble());
		tblReceiptMaster.setReceiptProfitTo(mockValues.nextDouble());
		tblReceiptMaster.setReceiptSecurityChequeNo(mockValues.nextString(100));
		tblReceiptMaster.setReceiptSecurityChequeDate(mockValues.nextDate());
		tblReceiptMaster.setReceiptSecurityChequeDrawnon(mockValues.nextString(1000));
		tblReceiptMaster.setReceiptSecurityChequeAddress(mockValues.nextString(1000));
		tblReceiptMaster.setCountpk(mockValues.nextLong());
		tblReceiptMaster.setPrefixcolumn(mockValues.nextString(100));
		tblReceiptMaster.setCreateDate(mockValues.nextDate());
		tblReceiptMaster.setModifiedDate(mockValues.nextDate());
		tblReceiptMaster.setStatus(mockValues.nextString(100));
		tblReceiptMaster.setUserId(mockValues.nextString(100));
		tblReceiptMaster.setMemberId(mockValues.nextString(50));

		TblReceiptMasterEntity tblReceiptMasterEntity = new TblReceiptMasterEntity();
		
		// When
		tblReceiptMasterServiceMapper.mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster, tblReceiptMasterEntity);
		
		// Then
		assertEquals(tblReceiptMaster.getReceiptAmount(), tblReceiptMasterEntity.getReceiptAmount());
		assertEquals(tblReceiptMaster.getReceiptModeofpayment(), tblReceiptMasterEntity.getReceiptModeofpayment());
		assertEquals(tblReceiptMaster.getReceiptAmountinwords(), tblReceiptMasterEntity.getReceiptAmountinwords());
		assertEquals(tblReceiptMaster.getReceiptOtherdetails(), tblReceiptMasterEntity.getReceiptOtherdetails());
		assertEquals(tblReceiptMaster.getReceiptCurrentdate(), tblReceiptMasterEntity.getReceiptCurrentdate());
		assertEquals(tblReceiptMaster.getReceiptType(), tblReceiptMasterEntity.getReceiptType());
		assertEquals(tblReceiptMaster.getReceiptBank(), tblReceiptMasterEntity.getReceiptBank());
		assertEquals(tblReceiptMaster.getReceiptChequedate(), tblReceiptMasterEntity.getReceiptChequedate());
		assertEquals(tblReceiptMaster.getReceiptDrawnon(), tblReceiptMasterEntity.getReceiptDrawnon());
		assertEquals(tblReceiptMaster.getReceiptBranch(), tblReceiptMasterEntity.getReceiptBranch());
		assertEquals(tblReceiptMaster.getReceiptCity(), tblReceiptMasterEntity.getReceiptCity());
		assertEquals(tblReceiptMaster.getReceiptAtproject(), tblReceiptMasterEntity.getReceiptAtproject());
		assertEquals(tblReceiptMaster.getReceiptPlace(), tblReceiptMasterEntity.getReceiptPlace());
		assertEquals(tblReceiptMaster.getReceiptProfitFrom(), tblReceiptMasterEntity.getReceiptProfitFrom());
		assertEquals(tblReceiptMaster.getReceiptProfitTo(), tblReceiptMasterEntity.getReceiptProfitTo());
		assertEquals(tblReceiptMaster.getReceiptSecurityChequeNo(), tblReceiptMasterEntity.getReceiptSecurityChequeNo());
		assertEquals(tblReceiptMaster.getReceiptSecurityChequeDate(), tblReceiptMasterEntity.getReceiptSecurityChequeDate());
		assertEquals(tblReceiptMaster.getReceiptSecurityChequeDrawnon(), tblReceiptMasterEntity.getReceiptSecurityChequeDrawnon());
		assertEquals(tblReceiptMaster.getReceiptSecurityChequeAddress(), tblReceiptMasterEntity.getReceiptSecurityChequeAddress());
		assertEquals(tblReceiptMaster.getCountpk(), tblReceiptMasterEntity.getCountpk());
		assertEquals(tblReceiptMaster.getPrefixcolumn(), tblReceiptMasterEntity.getPrefixcolumn());
		assertEquals(tblReceiptMaster.getCreateDate(), tblReceiptMasterEntity.getCreateDate());
		assertEquals(tblReceiptMaster.getModifiedDate(), tblReceiptMasterEntity.getModifiedDate());
		assertEquals(tblReceiptMaster.getStatus(), tblReceiptMasterEntity.getStatus());
		assertEquals(tblReceiptMaster.getUserId(), tblReceiptMasterEntity.getUserId());
		assertEquals(tblReceiptMaster.getMemberId(), tblReceiptMasterEntity.getTblMembershipForm().getMemberId());
	}

}