/*
 * Created on 18 Mar 2016 ( Time 11:55:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.ridas.bean.TblRtgsPaidDetails;
import com.ridas.bean.jpa.TblRtgsPaidDetailsEntity;
import com.ridas.bean.jpa.TblReceiptMasterEntity;
import com.ridas.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TblRtgsPaidDetailsServiceMapperTest {

	private TblRtgsPaidDetailsServiceMapper tblRtgsPaidDetailsServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		tblRtgsPaidDetailsServiceMapper = new TblRtgsPaidDetailsServiceMapper();
		tblRtgsPaidDetailsServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TblRtgsPaidDetailsEntity' to 'TblRtgsPaidDetails'
	 * @param tblRtgsPaidDetailsEntity
	 */
	@Test
	public void testMapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails() {
		// Given
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity = new TblRtgsPaidDetailsEntity();
		tblRtgsPaidDetailsEntity.setPaid(mockValues.nextString(100));
		tblRtgsPaidDetailsEntity.setMonth(mockValues.nextString(100));
		tblRtgsPaidDetailsEntity.setYear(mockValues.nextString(100));
		tblRtgsPaidDetailsEntity.setCountpk(mockValues.nextLong());
		tblRtgsPaidDetailsEntity.setPrefixcolumn(mockValues.nextString(100));
		tblRtgsPaidDetailsEntity.setCreateDate(mockValues.nextDate());
		tblRtgsPaidDetailsEntity.setModifiedDate(mockValues.nextDate());
		tblRtgsPaidDetailsEntity.setUserId(mockValues.nextString(100));
		tblRtgsPaidDetailsEntity.setStatus(mockValues.nextString(100));
		tblRtgsPaidDetailsEntity.setTblReceiptMaster(new TblReceiptMasterEntity());
		tblRtgsPaidDetailsEntity.getTblReceiptMaster().setReceiptPk(mockValues.nextString(50));
		
		// When
		TblRtgsPaidDetails tblRtgsPaidDetails = tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(tblRtgsPaidDetailsEntity);
		
		// Then
		assertEquals(tblRtgsPaidDetailsEntity.getPaid(), tblRtgsPaidDetails.getPaid());
		assertEquals(tblRtgsPaidDetailsEntity.getMonth(), tblRtgsPaidDetails.getMonth());
		assertEquals(tblRtgsPaidDetailsEntity.getYear(), tblRtgsPaidDetails.getYear());
		assertEquals(tblRtgsPaidDetailsEntity.getCountpk(), tblRtgsPaidDetails.getCountpk());
		assertEquals(tblRtgsPaidDetailsEntity.getPrefixcolumn(), tblRtgsPaidDetails.getPrefixcolumn());
		assertEquals(tblRtgsPaidDetailsEntity.getCreateDate(), tblRtgsPaidDetails.getCreateDate());
		assertEquals(tblRtgsPaidDetailsEntity.getModifiedDate(), tblRtgsPaidDetails.getModifiedDate());
		assertEquals(tblRtgsPaidDetailsEntity.getUserId(), tblRtgsPaidDetails.getUserId());
		assertEquals(tblRtgsPaidDetailsEntity.getStatus(), tblRtgsPaidDetails.getStatus());
		assertEquals(tblRtgsPaidDetailsEntity.getTblReceiptMaster().getReceiptPk(), tblRtgsPaidDetails.getReceiptPk());
	}
	
	/**
	 * Test : Mapping from 'TblRtgsPaidDetails' to 'TblRtgsPaidDetailsEntity'
	 */
	@Test
	public void testMapTblRtgsPaidDetailsToTblRtgsPaidDetailsEntity() {
		// Given
		TblRtgsPaidDetails tblRtgsPaidDetails = new TblRtgsPaidDetails();
		tblRtgsPaidDetails.setPaid(mockValues.nextString(100));
		tblRtgsPaidDetails.setMonth(mockValues.nextString(100));
		tblRtgsPaidDetails.setYear(mockValues.nextString(100));
		tblRtgsPaidDetails.setCountpk(mockValues.nextLong());
		tblRtgsPaidDetails.setPrefixcolumn(mockValues.nextString(100));
		tblRtgsPaidDetails.setCreateDate(mockValues.nextDate());
		tblRtgsPaidDetails.setModifiedDate(mockValues.nextDate());
		tblRtgsPaidDetails.setUserId(mockValues.nextString(100));
		tblRtgsPaidDetails.setStatus(mockValues.nextString(100));
		tblRtgsPaidDetails.setReceiptPk(mockValues.nextString(50));

		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity = new TblRtgsPaidDetailsEntity();
		
		// When
		tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsToTblRtgsPaidDetailsEntity(tblRtgsPaidDetails, tblRtgsPaidDetailsEntity);
		
		// Then
		assertEquals(tblRtgsPaidDetails.getPaid(), tblRtgsPaidDetailsEntity.getPaid());
		assertEquals(tblRtgsPaidDetails.getMonth(), tblRtgsPaidDetailsEntity.getMonth());
		assertEquals(tblRtgsPaidDetails.getYear(), tblRtgsPaidDetailsEntity.getYear());
		assertEquals(tblRtgsPaidDetails.getCountpk(), tblRtgsPaidDetailsEntity.getCountpk());
		assertEquals(tblRtgsPaidDetails.getPrefixcolumn(), tblRtgsPaidDetailsEntity.getPrefixcolumn());
		assertEquals(tblRtgsPaidDetails.getCreateDate(), tblRtgsPaidDetailsEntity.getCreateDate());
		assertEquals(tblRtgsPaidDetails.getModifiedDate(), tblRtgsPaidDetailsEntity.getModifiedDate());
		assertEquals(tblRtgsPaidDetails.getUserId(), tblRtgsPaidDetailsEntity.getUserId());
		assertEquals(tblRtgsPaidDetails.getStatus(), tblRtgsPaidDetailsEntity.getStatus());
		assertEquals(tblRtgsPaidDetails.getReceiptPk(), tblRtgsPaidDetailsEntity.getTblReceiptMaster().getReceiptPk());
	}

}