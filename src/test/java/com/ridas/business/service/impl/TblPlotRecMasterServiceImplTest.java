/*
 * Created on 29 Feb 2016 ( Time 17:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.ridas.bean.TblPlotRecMaster;
import com.ridas.bean.jpa.TblPlotRecMasterEntity;
import java.util.Date;
import com.ridas.business.service.mapping.TblPlotRecMasterServiceMapper;
import com.ridas.persistence.services.jpa.TblPlotRecMasterPersistenceJPA;
import com.ridas.test.TblPlotRecMasterFactoryForTest;
import com.ridas.test.TblPlotRecMasterEntityFactoryForTest;
import com.ridas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TblPlotRecMasterService
 */
@RunWith(MockitoJUnitRunner.class)
public class TblPlotRecMasterServiceImplTest {

	@InjectMocks
	private TblPlotRecMasterServiceImpl tblPlotRecMasterService;
	@Mock
	private TblPlotRecMasterPersistenceJPA tblPlotRecMasterPersistenceJPA;
	@Mock
	private TblPlotRecMasterServiceMapper tblPlotRecMasterServiceMapper;
	
	private TblPlotRecMasterFactoryForTest tblPlotRecMasterFactoryForTest = new TblPlotRecMasterFactoryForTest();

	private TblPlotRecMasterEntityFactoryForTest tblPlotRecMasterEntityFactoryForTest = new TblPlotRecMasterEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer plotReceiptId = mockValues.nextInteger();
		
		TblPlotRecMasterEntity tblPlotRecMasterEntity = tblPlotRecMasterPersistenceJPA.load(plotReceiptId);
		
		TblPlotRecMaster tblPlotRecMaster = tblPlotRecMasterFactoryForTest.newTblPlotRecMaster();
		when(tblPlotRecMasterServiceMapper.mapTblPlotRecMasterEntityToTblPlotRecMaster(tblPlotRecMasterEntity)).thenReturn(tblPlotRecMaster);

		// When
		TblPlotRecMaster tblPlotRecMasterFound = tblPlotRecMasterService.findById(plotReceiptId);

		// Then
		assertEquals(tblPlotRecMaster.getPlotReceiptId(),tblPlotRecMasterFound.getPlotReceiptId());
	}

	@Test
	public void findAll() {
		// Given
		List<TblPlotRecMasterEntity> tblPlotRecMasterEntitys = new ArrayList<TblPlotRecMasterEntity>();
		TblPlotRecMasterEntity tblPlotRecMasterEntity1 = tblPlotRecMasterEntityFactoryForTest.newTblPlotRecMasterEntity();
		tblPlotRecMasterEntitys.add(tblPlotRecMasterEntity1);
		TblPlotRecMasterEntity tblPlotRecMasterEntity2 = tblPlotRecMasterEntityFactoryForTest.newTblPlotRecMasterEntity();
		tblPlotRecMasterEntitys.add(tblPlotRecMasterEntity2);
		when(tblPlotRecMasterPersistenceJPA.loadAll()).thenReturn(tblPlotRecMasterEntitys);
		
		TblPlotRecMaster tblPlotRecMaster1 = tblPlotRecMasterFactoryForTest.newTblPlotRecMaster();
		when(tblPlotRecMasterServiceMapper.mapTblPlotRecMasterEntityToTblPlotRecMaster(tblPlotRecMasterEntity1)).thenReturn(tblPlotRecMaster1);
		TblPlotRecMaster tblPlotRecMaster2 = tblPlotRecMasterFactoryForTest.newTblPlotRecMaster();
		when(tblPlotRecMasterServiceMapper.mapTblPlotRecMasterEntityToTblPlotRecMaster(tblPlotRecMasterEntity2)).thenReturn(tblPlotRecMaster2);

		// When
		List<TblPlotRecMaster> tblPlotRecMastersFounds = tblPlotRecMasterService.findAll();

		// Then
		assertTrue(tblPlotRecMaster1 == tblPlotRecMastersFounds.get(0));
		assertTrue(tblPlotRecMaster2 == tblPlotRecMastersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TblPlotRecMaster tblPlotRecMaster = tblPlotRecMasterFactoryForTest.newTblPlotRecMaster();

		TblPlotRecMasterEntity tblPlotRecMasterEntity = tblPlotRecMasterEntityFactoryForTest.newTblPlotRecMasterEntity();
		when(tblPlotRecMasterPersistenceJPA.load(tblPlotRecMaster.getPlotReceiptId())).thenReturn(null);
		
		tblPlotRecMasterEntity = new TblPlotRecMasterEntity();
		tblPlotRecMasterServiceMapper.mapTblPlotRecMasterToTblPlotRecMasterEntity(tblPlotRecMaster, tblPlotRecMasterEntity);
		TblPlotRecMasterEntity tblPlotRecMasterEntitySaved = tblPlotRecMasterPersistenceJPA.save(tblPlotRecMasterEntity);
		
		TblPlotRecMaster tblPlotRecMasterSaved = tblPlotRecMasterFactoryForTest.newTblPlotRecMaster();
		when(tblPlotRecMasterServiceMapper.mapTblPlotRecMasterEntityToTblPlotRecMaster(tblPlotRecMasterEntitySaved)).thenReturn(tblPlotRecMasterSaved);

		// When
		TblPlotRecMaster tblPlotRecMasterResult = tblPlotRecMasterService.create(tblPlotRecMaster);

		// Then
		assertTrue(tblPlotRecMasterResult == tblPlotRecMasterSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TblPlotRecMaster tblPlotRecMaster = tblPlotRecMasterFactoryForTest.newTblPlotRecMaster();

		TblPlotRecMasterEntity tblPlotRecMasterEntity = tblPlotRecMasterEntityFactoryForTest.newTblPlotRecMasterEntity();
		when(tblPlotRecMasterPersistenceJPA.load(tblPlotRecMaster.getPlotReceiptId())).thenReturn(tblPlotRecMasterEntity);

		// When
		Exception exception = null;
		try {
			tblPlotRecMasterService.create(tblPlotRecMaster);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TblPlotRecMaster tblPlotRecMaster = tblPlotRecMasterFactoryForTest.newTblPlotRecMaster();

		TblPlotRecMasterEntity tblPlotRecMasterEntity = tblPlotRecMasterEntityFactoryForTest.newTblPlotRecMasterEntity();
		when(tblPlotRecMasterPersistenceJPA.load(tblPlotRecMaster.getPlotReceiptId())).thenReturn(tblPlotRecMasterEntity);
		
		TblPlotRecMasterEntity tblPlotRecMasterEntitySaved = tblPlotRecMasterEntityFactoryForTest.newTblPlotRecMasterEntity();
		when(tblPlotRecMasterPersistenceJPA.save(tblPlotRecMasterEntity)).thenReturn(tblPlotRecMasterEntitySaved);
		
		TblPlotRecMaster tblPlotRecMasterSaved = tblPlotRecMasterFactoryForTest.newTblPlotRecMaster();
		when(tblPlotRecMasterServiceMapper.mapTblPlotRecMasterEntityToTblPlotRecMaster(tblPlotRecMasterEntitySaved)).thenReturn(tblPlotRecMasterSaved);

		// When
		TblPlotRecMaster tblPlotRecMasterResult = tblPlotRecMasterService.update(tblPlotRecMaster);

		// Then
		verify(tblPlotRecMasterServiceMapper).mapTblPlotRecMasterToTblPlotRecMasterEntity(tblPlotRecMaster, tblPlotRecMasterEntity);
		assertTrue(tblPlotRecMasterResult == tblPlotRecMasterSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer plotReceiptId = mockValues.nextInteger();

		// When
		tblPlotRecMasterService.delete(plotReceiptId);

		// Then
		verify(tblPlotRecMasterPersistenceJPA).delete(plotReceiptId);
		
	}

}
