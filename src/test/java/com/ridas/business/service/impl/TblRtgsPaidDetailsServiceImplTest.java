/*
 * Created on 18 Mar 2016 ( Time 11:55:09 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.ridas.bean.TblRtgsPaidDetails;
import com.ridas.bean.jpa.TblRtgsPaidDetailsEntity;
import java.util.Date;
import com.ridas.business.service.mapping.TblRtgsPaidDetailsServiceMapper;
import com.ridas.persistence.services.jpa.TblRtgsPaidDetailsPersistenceJPA;
import com.ridas.test.TblRtgsPaidDetailsFactoryForTest;
import com.ridas.test.TblRtgsPaidDetailsEntityFactoryForTest;
import com.ridas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TblRtgsPaidDetailsService
 */
@RunWith(MockitoJUnitRunner.class)
public class TblRtgsPaidDetailsServiceImplTest {

	@InjectMocks
	private TblRtgsPaidDetailsServiceImpl tblRtgsPaidDetailsService;
	@Mock
	private TblRtgsPaidDetailsPersistenceJPA tblRtgsPaidDetailsPersistenceJPA;
	@Mock
	private TblRtgsPaidDetailsServiceMapper tblRtgsPaidDetailsServiceMapper;
	
	private TblRtgsPaidDetailsFactoryForTest tblRtgsPaidDetailsFactoryForTest = new TblRtgsPaidDetailsFactoryForTest();

	private TblRtgsPaidDetailsEntityFactoryForTest tblRtgsPaidDetailsEntityFactoryForTest = new TblRtgsPaidDetailsEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer rtgsDetailsId = mockValues.nextInteger();
		
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity = tblRtgsPaidDetailsPersistenceJPA.load(rtgsDetailsId);
		
		TblRtgsPaidDetails tblRtgsPaidDetails = tblRtgsPaidDetailsFactoryForTest.newTblRtgsPaidDetails();
		when(tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(tblRtgsPaidDetailsEntity)).thenReturn(tblRtgsPaidDetails);

		// When
		TblRtgsPaidDetails tblRtgsPaidDetailsFound = tblRtgsPaidDetailsService.findById(rtgsDetailsId);

		// Then
		assertEquals(tblRtgsPaidDetails.getRtgsDetailsId(),tblRtgsPaidDetailsFound.getRtgsDetailsId());
	}

	@Test
	public void findAll() {
		// Given
		List<TblRtgsPaidDetailsEntity> tblRtgsPaidDetailsEntitys = new ArrayList<TblRtgsPaidDetailsEntity>();
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity1 = tblRtgsPaidDetailsEntityFactoryForTest.newTblRtgsPaidDetailsEntity();
		tblRtgsPaidDetailsEntitys.add(tblRtgsPaidDetailsEntity1);
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity2 = tblRtgsPaidDetailsEntityFactoryForTest.newTblRtgsPaidDetailsEntity();
		tblRtgsPaidDetailsEntitys.add(tblRtgsPaidDetailsEntity2);
		when(tblRtgsPaidDetailsPersistenceJPA.loadAll()).thenReturn(tblRtgsPaidDetailsEntitys);
		
		TblRtgsPaidDetails tblRtgsPaidDetails1 = tblRtgsPaidDetailsFactoryForTest.newTblRtgsPaidDetails();
		when(tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(tblRtgsPaidDetailsEntity1)).thenReturn(tblRtgsPaidDetails1);
		TblRtgsPaidDetails tblRtgsPaidDetails2 = tblRtgsPaidDetailsFactoryForTest.newTblRtgsPaidDetails();
		when(tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(tblRtgsPaidDetailsEntity2)).thenReturn(tblRtgsPaidDetails2);

		// When
		List<TblRtgsPaidDetails> tblRtgsPaidDetailssFounds = tblRtgsPaidDetailsService.findAll();

		// Then
		assertTrue(tblRtgsPaidDetails1 == tblRtgsPaidDetailssFounds.get(0));
		assertTrue(tblRtgsPaidDetails2 == tblRtgsPaidDetailssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TblRtgsPaidDetails tblRtgsPaidDetails = tblRtgsPaidDetailsFactoryForTest.newTblRtgsPaidDetails();

		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity = tblRtgsPaidDetailsEntityFactoryForTest.newTblRtgsPaidDetailsEntity();
		when(tblRtgsPaidDetailsPersistenceJPA.load(tblRtgsPaidDetails.getRtgsDetailsId())).thenReturn(null);
		
		tblRtgsPaidDetailsEntity = new TblRtgsPaidDetailsEntity();
		tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsToTblRtgsPaidDetailsEntity(tblRtgsPaidDetails, tblRtgsPaidDetailsEntity);
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntitySaved = tblRtgsPaidDetailsPersistenceJPA.save(tblRtgsPaidDetailsEntity);
		
		TblRtgsPaidDetails tblRtgsPaidDetailsSaved = tblRtgsPaidDetailsFactoryForTest.newTblRtgsPaidDetails();
		when(tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(tblRtgsPaidDetailsEntitySaved)).thenReturn(tblRtgsPaidDetailsSaved);

		// When
		TblRtgsPaidDetails tblRtgsPaidDetailsResult = tblRtgsPaidDetailsService.create(tblRtgsPaidDetails);

		// Then
		assertTrue(tblRtgsPaidDetailsResult == tblRtgsPaidDetailsSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TblRtgsPaidDetails tblRtgsPaidDetails = tblRtgsPaidDetailsFactoryForTest.newTblRtgsPaidDetails();

		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity = tblRtgsPaidDetailsEntityFactoryForTest.newTblRtgsPaidDetailsEntity();
		when(tblRtgsPaidDetailsPersistenceJPA.load(tblRtgsPaidDetails.getRtgsDetailsId())).thenReturn(tblRtgsPaidDetailsEntity);

		// When
		Exception exception = null;
		try {
			tblRtgsPaidDetailsService.create(tblRtgsPaidDetails);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TblRtgsPaidDetails tblRtgsPaidDetails = tblRtgsPaidDetailsFactoryForTest.newTblRtgsPaidDetails();

		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntity = tblRtgsPaidDetailsEntityFactoryForTest.newTblRtgsPaidDetailsEntity();
		when(tblRtgsPaidDetailsPersistenceJPA.load(tblRtgsPaidDetails.getRtgsDetailsId())).thenReturn(tblRtgsPaidDetailsEntity);
		
		TblRtgsPaidDetailsEntity tblRtgsPaidDetailsEntitySaved = tblRtgsPaidDetailsEntityFactoryForTest.newTblRtgsPaidDetailsEntity();
		when(tblRtgsPaidDetailsPersistenceJPA.save(tblRtgsPaidDetailsEntity)).thenReturn(tblRtgsPaidDetailsEntitySaved);
		
		TblRtgsPaidDetails tblRtgsPaidDetailsSaved = tblRtgsPaidDetailsFactoryForTest.newTblRtgsPaidDetails();
		when(tblRtgsPaidDetailsServiceMapper.mapTblRtgsPaidDetailsEntityToTblRtgsPaidDetails(tblRtgsPaidDetailsEntitySaved)).thenReturn(tblRtgsPaidDetailsSaved);

		// When
		TblRtgsPaidDetails tblRtgsPaidDetailsResult = tblRtgsPaidDetailsService.update(tblRtgsPaidDetails);

		// Then
		verify(tblRtgsPaidDetailsServiceMapper).mapTblRtgsPaidDetailsToTblRtgsPaidDetailsEntity(tblRtgsPaidDetails, tblRtgsPaidDetailsEntity);
		assertTrue(tblRtgsPaidDetailsResult == tblRtgsPaidDetailsSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer rtgsDetailsId = mockValues.nextInteger();

		// When
		tblRtgsPaidDetailsService.delete(rtgsDetailsId);

		// Then
		verify(tblRtgsPaidDetailsPersistenceJPA).delete(rtgsDetailsId);
		
	}

}
