/*
 * Created on 29 Feb 2016 ( Time 17:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.ridas.bean.TblReceiptMaster;
import com.ridas.bean.jpa.TblReceiptMasterEntity;
import java.util.Date;
import java.util.List;
import com.ridas.business.service.mapping.TblReceiptMasterServiceMapper;
import com.ridas.persistence.services.jpa.TblReceiptMasterPersistenceJPA;
import com.ridas.test.TblReceiptMasterFactoryForTest;
import com.ridas.test.TblReceiptMasterEntityFactoryForTest;
import com.ridas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TblReceiptMasterService
 */
@RunWith(MockitoJUnitRunner.class)
public class TblReceiptMasterServiceImplTest {

	@InjectMocks
	private TblReceiptMasterServiceImpl tblReceiptMasterService;
	@Mock
	private TblReceiptMasterPersistenceJPA tblReceiptMasterPersistenceJPA;
	@Mock
	private TblReceiptMasterServiceMapper tblReceiptMasterServiceMapper;
	
	private TblReceiptMasterFactoryForTest tblReceiptMasterFactoryForTest = new TblReceiptMasterFactoryForTest();

	private TblReceiptMasterEntityFactoryForTest tblReceiptMasterEntityFactoryForTest = new TblReceiptMasterEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String receiptPk = mockValues.nextString(50);
		
		TblReceiptMasterEntity tblReceiptMasterEntity = tblReceiptMasterPersistenceJPA.load(receiptPk);
		
		TblReceiptMaster tblReceiptMaster = tblReceiptMasterFactoryForTest.newTblReceiptMaster();
		when(tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity)).thenReturn(tblReceiptMaster);

		// When
		TblReceiptMaster tblReceiptMasterFound = tblReceiptMasterService.findById(receiptPk);

		// Then
		assertEquals(tblReceiptMaster.getReceiptPk(),tblReceiptMasterFound.getReceiptPk());
	}

	@Test
	public void findAll() {
		// Given
		List<TblReceiptMasterEntity> tblReceiptMasterEntitys = new ArrayList<TblReceiptMasterEntity>();
		TblReceiptMasterEntity tblReceiptMasterEntity1 = tblReceiptMasterEntityFactoryForTest.newTblReceiptMasterEntity();
		tblReceiptMasterEntitys.add(tblReceiptMasterEntity1);
		TblReceiptMasterEntity tblReceiptMasterEntity2 = tblReceiptMasterEntityFactoryForTest.newTblReceiptMasterEntity();
		tblReceiptMasterEntitys.add(tblReceiptMasterEntity2);
		when(tblReceiptMasterPersistenceJPA.loadAll()).thenReturn(tblReceiptMasterEntitys);
		
		TblReceiptMaster tblReceiptMaster1 = tblReceiptMasterFactoryForTest.newTblReceiptMaster();
		when(tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity1)).thenReturn(tblReceiptMaster1);
		TblReceiptMaster tblReceiptMaster2 = tblReceiptMasterFactoryForTest.newTblReceiptMaster();
		when(tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntity2)).thenReturn(tblReceiptMaster2);

		// When
		List<TblReceiptMaster> tblReceiptMastersFounds = tblReceiptMasterService.findAll();

		// Then
		assertTrue(tblReceiptMaster1 == tblReceiptMastersFounds.get(0));
		assertTrue(tblReceiptMaster2 == tblReceiptMastersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TblReceiptMaster tblReceiptMaster = tblReceiptMasterFactoryForTest.newTblReceiptMaster();

		TblReceiptMasterEntity tblReceiptMasterEntity = tblReceiptMasterEntityFactoryForTest.newTblReceiptMasterEntity();
		when(tblReceiptMasterPersistenceJPA.load(tblReceiptMaster.getReceiptPk())).thenReturn(null);
		
		tblReceiptMasterEntity = new TblReceiptMasterEntity();
		tblReceiptMasterServiceMapper.mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster, tblReceiptMasterEntity);
		TblReceiptMasterEntity tblReceiptMasterEntitySaved = tblReceiptMasterPersistenceJPA.save(tblReceiptMasterEntity);
		
		TblReceiptMaster tblReceiptMasterSaved = tblReceiptMasterFactoryForTest.newTblReceiptMaster();
		when(tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntitySaved)).thenReturn(tblReceiptMasterSaved);

		// When
		TblReceiptMaster tblReceiptMasterResult = tblReceiptMasterService.create(tblReceiptMaster);

		// Then
		assertTrue(tblReceiptMasterResult == tblReceiptMasterSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TblReceiptMaster tblReceiptMaster = tblReceiptMasterFactoryForTest.newTblReceiptMaster();

		TblReceiptMasterEntity tblReceiptMasterEntity = tblReceiptMasterEntityFactoryForTest.newTblReceiptMasterEntity();
		when(tblReceiptMasterPersistenceJPA.load(tblReceiptMaster.getReceiptPk())).thenReturn(tblReceiptMasterEntity);

		// When
		Exception exception = null;
		try {
			tblReceiptMasterService.create(tblReceiptMaster);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TblReceiptMaster tblReceiptMaster = tblReceiptMasterFactoryForTest.newTblReceiptMaster();

		TblReceiptMasterEntity tblReceiptMasterEntity = tblReceiptMasterEntityFactoryForTest.newTblReceiptMasterEntity();
		when(tblReceiptMasterPersistenceJPA.load(tblReceiptMaster.getReceiptPk())).thenReturn(tblReceiptMasterEntity);
		
		TblReceiptMasterEntity tblReceiptMasterEntitySaved = tblReceiptMasterEntityFactoryForTest.newTblReceiptMasterEntity();
		when(tblReceiptMasterPersistenceJPA.save(tblReceiptMasterEntity)).thenReturn(tblReceiptMasterEntitySaved);
		
		TblReceiptMaster tblReceiptMasterSaved = tblReceiptMasterFactoryForTest.newTblReceiptMaster();
		when(tblReceiptMasterServiceMapper.mapTblReceiptMasterEntityToTblReceiptMaster(tblReceiptMasterEntitySaved)).thenReturn(tblReceiptMasterSaved);

		// When
		TblReceiptMaster tblReceiptMasterResult = tblReceiptMasterService.update(tblReceiptMaster);

		// Then
		verify(tblReceiptMasterServiceMapper).mapTblReceiptMasterToTblReceiptMasterEntity(tblReceiptMaster, tblReceiptMasterEntity);
		assertTrue(tblReceiptMasterResult == tblReceiptMasterSaved);
	}

	@Test
	public void delete() {
		// Given
		String receiptPk = mockValues.nextString(50);

		// When
		tblReceiptMasterService.delete(receiptPk);

		// Then
		verify(tblReceiptMasterPersistenceJPA).delete(receiptPk);
		
	}

}
