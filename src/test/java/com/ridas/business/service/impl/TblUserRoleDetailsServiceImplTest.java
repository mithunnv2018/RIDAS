/*
 * Created on 29 Feb 2016 ( Time 17:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.ridas.bean.TblUserRoleDetails;
import com.ridas.bean.jpa.TblUserRoleDetailsEntity;
import java.util.Date;
import com.ridas.business.service.mapping.TblUserRoleDetailsServiceMapper;
import com.ridas.persistence.services.jpa.TblUserRoleDetailsPersistenceJPA;
import com.ridas.test.TblUserRoleDetailsFactoryForTest;
import com.ridas.test.TblUserRoleDetailsEntityFactoryForTest;
import com.ridas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TblUserRoleDetailsService
 */
@RunWith(MockitoJUnitRunner.class)
public class TblUserRoleDetailsServiceImplTest {

	@InjectMocks
	private TblUserRoleDetailsServiceImpl tblUserRoleDetailsService;
	@Mock
	private TblUserRoleDetailsPersistenceJPA tblUserRoleDetailsPersistenceJPA;
	@Mock
	private TblUserRoleDetailsServiceMapper tblUserRoleDetailsServiceMapper;
	
	private TblUserRoleDetailsFactoryForTest tblUserRoleDetailsFactoryForTest = new TblUserRoleDetailsFactoryForTest();

	private TblUserRoleDetailsEntityFactoryForTest tblUserRoleDetailsEntityFactoryForTest = new TblUserRoleDetailsEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String userRoleDetailId = mockValues.nextString(100);
		
		TblUserRoleDetailsEntity tblUserRoleDetailsEntity = tblUserRoleDetailsPersistenceJPA.load(userRoleDetailId);
		
		TblUserRoleDetails tblUserRoleDetails = tblUserRoleDetailsFactoryForTest.newTblUserRoleDetails();
		when(tblUserRoleDetailsServiceMapper.mapTblUserRoleDetailsEntityToTblUserRoleDetails(tblUserRoleDetailsEntity)).thenReturn(tblUserRoleDetails);

		// When
		TblUserRoleDetails tblUserRoleDetailsFound = tblUserRoleDetailsService.findById(userRoleDetailId);

		// Then
		assertEquals(tblUserRoleDetails.getUserRoleDetailId(),tblUserRoleDetailsFound.getUserRoleDetailId());
	}

	@Test
	public void findAll() {
		// Given
		List<TblUserRoleDetailsEntity> tblUserRoleDetailsEntitys = new ArrayList<TblUserRoleDetailsEntity>();
		TblUserRoleDetailsEntity tblUserRoleDetailsEntity1 = tblUserRoleDetailsEntityFactoryForTest.newTblUserRoleDetailsEntity();
		tblUserRoleDetailsEntitys.add(tblUserRoleDetailsEntity1);
		TblUserRoleDetailsEntity tblUserRoleDetailsEntity2 = tblUserRoleDetailsEntityFactoryForTest.newTblUserRoleDetailsEntity();
		tblUserRoleDetailsEntitys.add(tblUserRoleDetailsEntity2);
		when(tblUserRoleDetailsPersistenceJPA.loadAll()).thenReturn(tblUserRoleDetailsEntitys);
		
		TblUserRoleDetails tblUserRoleDetails1 = tblUserRoleDetailsFactoryForTest.newTblUserRoleDetails();
		when(tblUserRoleDetailsServiceMapper.mapTblUserRoleDetailsEntityToTblUserRoleDetails(tblUserRoleDetailsEntity1)).thenReturn(tblUserRoleDetails1);
		TblUserRoleDetails tblUserRoleDetails2 = tblUserRoleDetailsFactoryForTest.newTblUserRoleDetails();
		when(tblUserRoleDetailsServiceMapper.mapTblUserRoleDetailsEntityToTblUserRoleDetails(tblUserRoleDetailsEntity2)).thenReturn(tblUserRoleDetails2);

		// When
		List<TblUserRoleDetails> tblUserRoleDetailssFounds = tblUserRoleDetailsService.findAll();

		// Then
		assertTrue(tblUserRoleDetails1 == tblUserRoleDetailssFounds.get(0));
		assertTrue(tblUserRoleDetails2 == tblUserRoleDetailssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TblUserRoleDetails tblUserRoleDetails = tblUserRoleDetailsFactoryForTest.newTblUserRoleDetails();

		TblUserRoleDetailsEntity tblUserRoleDetailsEntity = tblUserRoleDetailsEntityFactoryForTest.newTblUserRoleDetailsEntity();
		when(tblUserRoleDetailsPersistenceJPA.load(tblUserRoleDetails.getUserRoleDetailId())).thenReturn(null);
		
		tblUserRoleDetailsEntity = new TblUserRoleDetailsEntity();
		tblUserRoleDetailsServiceMapper.mapTblUserRoleDetailsToTblUserRoleDetailsEntity(tblUserRoleDetails, tblUserRoleDetailsEntity);
		TblUserRoleDetailsEntity tblUserRoleDetailsEntitySaved = tblUserRoleDetailsPersistenceJPA.save(tblUserRoleDetailsEntity);
		
		TblUserRoleDetails tblUserRoleDetailsSaved = tblUserRoleDetailsFactoryForTest.newTblUserRoleDetails();
		when(tblUserRoleDetailsServiceMapper.mapTblUserRoleDetailsEntityToTblUserRoleDetails(tblUserRoleDetailsEntitySaved)).thenReturn(tblUserRoleDetailsSaved);

		// When
		TblUserRoleDetails tblUserRoleDetailsResult = tblUserRoleDetailsService.create(tblUserRoleDetails);

		// Then
		assertTrue(tblUserRoleDetailsResult == tblUserRoleDetailsSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TblUserRoleDetails tblUserRoleDetails = tblUserRoleDetailsFactoryForTest.newTblUserRoleDetails();

		TblUserRoleDetailsEntity tblUserRoleDetailsEntity = tblUserRoleDetailsEntityFactoryForTest.newTblUserRoleDetailsEntity();
		when(tblUserRoleDetailsPersistenceJPA.load(tblUserRoleDetails.getUserRoleDetailId())).thenReturn(tblUserRoleDetailsEntity);

		// When
		Exception exception = null;
		try {
			tblUserRoleDetailsService.create(tblUserRoleDetails);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TblUserRoleDetails tblUserRoleDetails = tblUserRoleDetailsFactoryForTest.newTblUserRoleDetails();

		TblUserRoleDetailsEntity tblUserRoleDetailsEntity = tblUserRoleDetailsEntityFactoryForTest.newTblUserRoleDetailsEntity();
		when(tblUserRoleDetailsPersistenceJPA.load(tblUserRoleDetails.getUserRoleDetailId())).thenReturn(tblUserRoleDetailsEntity);
		
		TblUserRoleDetailsEntity tblUserRoleDetailsEntitySaved = tblUserRoleDetailsEntityFactoryForTest.newTblUserRoleDetailsEntity();
		when(tblUserRoleDetailsPersistenceJPA.save(tblUserRoleDetailsEntity)).thenReturn(tblUserRoleDetailsEntitySaved);
		
		TblUserRoleDetails tblUserRoleDetailsSaved = tblUserRoleDetailsFactoryForTest.newTblUserRoleDetails();
		when(tblUserRoleDetailsServiceMapper.mapTblUserRoleDetailsEntityToTblUserRoleDetails(tblUserRoleDetailsEntitySaved)).thenReturn(tblUserRoleDetailsSaved);

		// When
		TblUserRoleDetails tblUserRoleDetailsResult = tblUserRoleDetailsService.update(tblUserRoleDetails);

		// Then
		verify(tblUserRoleDetailsServiceMapper).mapTblUserRoleDetailsToTblUserRoleDetailsEntity(tblUserRoleDetails, tblUserRoleDetailsEntity);
		assertTrue(tblUserRoleDetailsResult == tblUserRoleDetailsSaved);
	}

	@Test
	public void delete() {
		// Given
		String userRoleDetailId = mockValues.nextString(100);

		// When
		tblUserRoleDetailsService.delete(userRoleDetailId);

		// Then
		verify(tblUserRoleDetailsPersistenceJPA).delete(userRoleDetailId);
		
	}

}
