/*
 * Created on 29 Feb 2016 ( Time 17:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.ridas.bean.TblUserMaster;
import com.ridas.bean.jpa.TblUserMasterEntity;
import java.util.Date;
import java.util.List;
import com.ridas.business.service.mapping.TblUserMasterServiceMapper;
import com.ridas.persistence.services.jpa.TblUserMasterPersistenceJPA;
import com.ridas.test.TblUserMasterFactoryForTest;
import com.ridas.test.TblUserMasterEntityFactoryForTest;
import com.ridas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TblUserMasterService
 */
@RunWith(MockitoJUnitRunner.class)
public class TblUserMasterServiceImplTest {

	@InjectMocks
	private TblUserMasterServiceImpl tblUserMasterService;
	@Mock
	private TblUserMasterPersistenceJPA tblUserMasterPersistenceJPA;
	@Mock
	private TblUserMasterServiceMapper tblUserMasterServiceMapper;
	
	private TblUserMasterFactoryForTest tblUserMasterFactoryForTest = new TblUserMasterFactoryForTest();

	private TblUserMasterEntityFactoryForTest tblUserMasterEntityFactoryForTest = new TblUserMasterEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String userIdPk = mockValues.nextString(100);
		
		TblUserMasterEntity tblUserMasterEntity = tblUserMasterPersistenceJPA.load(userIdPk);
		
		TblUserMaster tblUserMaster = tblUserMasterFactoryForTest.newTblUserMaster();
		when(tblUserMasterServiceMapper.mapTblUserMasterEntityToTblUserMaster(tblUserMasterEntity)).thenReturn(tblUserMaster);

		// When
		TblUserMaster tblUserMasterFound = tblUserMasterService.findById(userIdPk);

		// Then
		assertEquals(tblUserMaster.getUserIdPk(),tblUserMasterFound.getUserIdPk());
	}

	@Test
	public void findAll() {
		// Given
		List<TblUserMasterEntity> tblUserMasterEntitys = new ArrayList<TblUserMasterEntity>();
		TblUserMasterEntity tblUserMasterEntity1 = tblUserMasterEntityFactoryForTest.newTblUserMasterEntity();
		tblUserMasterEntitys.add(tblUserMasterEntity1);
		TblUserMasterEntity tblUserMasterEntity2 = tblUserMasterEntityFactoryForTest.newTblUserMasterEntity();
		tblUserMasterEntitys.add(tblUserMasterEntity2);
		when(tblUserMasterPersistenceJPA.loadAll()).thenReturn(tblUserMasterEntitys);
		
		TblUserMaster tblUserMaster1 = tblUserMasterFactoryForTest.newTblUserMaster();
		when(tblUserMasterServiceMapper.mapTblUserMasterEntityToTblUserMaster(tblUserMasterEntity1)).thenReturn(tblUserMaster1);
		TblUserMaster tblUserMaster2 = tblUserMasterFactoryForTest.newTblUserMaster();
		when(tblUserMasterServiceMapper.mapTblUserMasterEntityToTblUserMaster(tblUserMasterEntity2)).thenReturn(tblUserMaster2);

		// When
		List<TblUserMaster> tblUserMastersFounds = tblUserMasterService.findAll();

		// Then
		assertTrue(tblUserMaster1 == tblUserMastersFounds.get(0));
		assertTrue(tblUserMaster2 == tblUserMastersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TblUserMaster tblUserMaster = tblUserMasterFactoryForTest.newTblUserMaster();

		TblUserMasterEntity tblUserMasterEntity = tblUserMasterEntityFactoryForTest.newTblUserMasterEntity();
		when(tblUserMasterPersistenceJPA.load(tblUserMaster.getUserIdPk())).thenReturn(null);
		
		tblUserMasterEntity = new TblUserMasterEntity();
		tblUserMasterServiceMapper.mapTblUserMasterToTblUserMasterEntity(tblUserMaster, tblUserMasterEntity);
		TblUserMasterEntity tblUserMasterEntitySaved = tblUserMasterPersistenceJPA.save(tblUserMasterEntity);
		
		TblUserMaster tblUserMasterSaved = tblUserMasterFactoryForTest.newTblUserMaster();
		when(tblUserMasterServiceMapper.mapTblUserMasterEntityToTblUserMaster(tblUserMasterEntitySaved)).thenReturn(tblUserMasterSaved);

		// When
		TblUserMaster tblUserMasterResult = tblUserMasterService.create(tblUserMaster);

		// Then
		assertTrue(tblUserMasterResult == tblUserMasterSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TblUserMaster tblUserMaster = tblUserMasterFactoryForTest.newTblUserMaster();

		TblUserMasterEntity tblUserMasterEntity = tblUserMasterEntityFactoryForTest.newTblUserMasterEntity();
		when(tblUserMasterPersistenceJPA.load(tblUserMaster.getUserIdPk())).thenReturn(tblUserMasterEntity);

		// When
		Exception exception = null;
		try {
			tblUserMasterService.create(tblUserMaster);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TblUserMaster tblUserMaster = tblUserMasterFactoryForTest.newTblUserMaster();

		TblUserMasterEntity tblUserMasterEntity = tblUserMasterEntityFactoryForTest.newTblUserMasterEntity();
		when(tblUserMasterPersistenceJPA.load(tblUserMaster.getUserIdPk())).thenReturn(tblUserMasterEntity);
		
		TblUserMasterEntity tblUserMasterEntitySaved = tblUserMasterEntityFactoryForTest.newTblUserMasterEntity();
		when(tblUserMasterPersistenceJPA.save(tblUserMasterEntity)).thenReturn(tblUserMasterEntitySaved);
		
		TblUserMaster tblUserMasterSaved = tblUserMasterFactoryForTest.newTblUserMaster();
		when(tblUserMasterServiceMapper.mapTblUserMasterEntityToTblUserMaster(tblUserMasterEntitySaved)).thenReturn(tblUserMasterSaved);

		// When
		TblUserMaster tblUserMasterResult = tblUserMasterService.update(tblUserMaster);

		// Then
		verify(tblUserMasterServiceMapper).mapTblUserMasterToTblUserMasterEntity(tblUserMaster, tblUserMasterEntity);
		assertTrue(tblUserMasterResult == tblUserMasterSaved);
	}

	@Test
	public void delete() {
		// Given
		String userIdPk = mockValues.nextString(100);

		// When
		tblUserMasterService.delete(userIdPk);

		// Then
		verify(tblUserMasterPersistenceJPA).delete(userIdPk);
		
	}

}
