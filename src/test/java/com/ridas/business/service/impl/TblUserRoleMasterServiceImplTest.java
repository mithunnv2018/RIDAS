/*
 * Created on 29 Feb 2016 ( Time 17:46:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.ridas.bean.TblUserRoleMaster;
import com.ridas.bean.jpa.TblUserRoleMasterEntity;
import java.util.Date;
import java.util.List;
import com.ridas.business.service.mapping.TblUserRoleMasterServiceMapper;
import com.ridas.persistence.services.jpa.TblUserRoleMasterPersistenceJPA;
import com.ridas.test.TblUserRoleMasterFactoryForTest;
import com.ridas.test.TblUserRoleMasterEntityFactoryForTest;
import com.ridas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TblUserRoleMasterService
 */
@RunWith(MockitoJUnitRunner.class)
public class TblUserRoleMasterServiceImplTest {

	@InjectMocks
	private TblUserRoleMasterServiceImpl tblUserRoleMasterService;
	@Mock
	private TblUserRoleMasterPersistenceJPA tblUserRoleMasterPersistenceJPA;
	@Mock
	private TblUserRoleMasterServiceMapper tblUserRoleMasterServiceMapper;
	
	private TblUserRoleMasterFactoryForTest tblUserRoleMasterFactoryForTest = new TblUserRoleMasterFactoryForTest();

	private TblUserRoleMasterEntityFactoryForTest tblUserRoleMasterEntityFactoryForTest = new TblUserRoleMasterEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String userRoleId = mockValues.nextString(100);
		
		TblUserRoleMasterEntity tblUserRoleMasterEntity = tblUserRoleMasterPersistenceJPA.load(userRoleId);
		
		TblUserRoleMaster tblUserRoleMaster = tblUserRoleMasterFactoryForTest.newTblUserRoleMaster();
		when(tblUserRoleMasterServiceMapper.mapTblUserRoleMasterEntityToTblUserRoleMaster(tblUserRoleMasterEntity)).thenReturn(tblUserRoleMaster);

		// When
		TblUserRoleMaster tblUserRoleMasterFound = tblUserRoleMasterService.findById(userRoleId);

		// Then
		assertEquals(tblUserRoleMaster.getUserRoleId(),tblUserRoleMasterFound.getUserRoleId());
	}

	@Test
	public void findAll() {
		// Given
		List<TblUserRoleMasterEntity> tblUserRoleMasterEntitys = new ArrayList<TblUserRoleMasterEntity>();
		TblUserRoleMasterEntity tblUserRoleMasterEntity1 = tblUserRoleMasterEntityFactoryForTest.newTblUserRoleMasterEntity();
		tblUserRoleMasterEntitys.add(tblUserRoleMasterEntity1);
		TblUserRoleMasterEntity tblUserRoleMasterEntity2 = tblUserRoleMasterEntityFactoryForTest.newTblUserRoleMasterEntity();
		tblUserRoleMasterEntitys.add(tblUserRoleMasterEntity2);
		when(tblUserRoleMasterPersistenceJPA.loadAll()).thenReturn(tblUserRoleMasterEntitys);
		
		TblUserRoleMaster tblUserRoleMaster1 = tblUserRoleMasterFactoryForTest.newTblUserRoleMaster();
		when(tblUserRoleMasterServiceMapper.mapTblUserRoleMasterEntityToTblUserRoleMaster(tblUserRoleMasterEntity1)).thenReturn(tblUserRoleMaster1);
		TblUserRoleMaster tblUserRoleMaster2 = tblUserRoleMasterFactoryForTest.newTblUserRoleMaster();
		when(tblUserRoleMasterServiceMapper.mapTblUserRoleMasterEntityToTblUserRoleMaster(tblUserRoleMasterEntity2)).thenReturn(tblUserRoleMaster2);

		// When
		List<TblUserRoleMaster> tblUserRoleMastersFounds = tblUserRoleMasterService.findAll();

		// Then
		assertTrue(tblUserRoleMaster1 == tblUserRoleMastersFounds.get(0));
		assertTrue(tblUserRoleMaster2 == tblUserRoleMastersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TblUserRoleMaster tblUserRoleMaster = tblUserRoleMasterFactoryForTest.newTblUserRoleMaster();

		TblUserRoleMasterEntity tblUserRoleMasterEntity = tblUserRoleMasterEntityFactoryForTest.newTblUserRoleMasterEntity();
		when(tblUserRoleMasterPersistenceJPA.load(tblUserRoleMaster.getUserRoleId())).thenReturn(null);
		
		tblUserRoleMasterEntity = new TblUserRoleMasterEntity();
		tblUserRoleMasterServiceMapper.mapTblUserRoleMasterToTblUserRoleMasterEntity(tblUserRoleMaster, tblUserRoleMasterEntity);
		TblUserRoleMasterEntity tblUserRoleMasterEntitySaved = tblUserRoleMasterPersistenceJPA.save(tblUserRoleMasterEntity);
		
		TblUserRoleMaster tblUserRoleMasterSaved = tblUserRoleMasterFactoryForTest.newTblUserRoleMaster();
		when(tblUserRoleMasterServiceMapper.mapTblUserRoleMasterEntityToTblUserRoleMaster(tblUserRoleMasterEntitySaved)).thenReturn(tblUserRoleMasterSaved);

		// When
		TblUserRoleMaster tblUserRoleMasterResult = tblUserRoleMasterService.create(tblUserRoleMaster);

		// Then
		assertTrue(tblUserRoleMasterResult == tblUserRoleMasterSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TblUserRoleMaster tblUserRoleMaster = tblUserRoleMasterFactoryForTest.newTblUserRoleMaster();

		TblUserRoleMasterEntity tblUserRoleMasterEntity = tblUserRoleMasterEntityFactoryForTest.newTblUserRoleMasterEntity();
		when(tblUserRoleMasterPersistenceJPA.load(tblUserRoleMaster.getUserRoleId())).thenReturn(tblUserRoleMasterEntity);

		// When
		Exception exception = null;
		try {
			tblUserRoleMasterService.create(tblUserRoleMaster);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TblUserRoleMaster tblUserRoleMaster = tblUserRoleMasterFactoryForTest.newTblUserRoleMaster();

		TblUserRoleMasterEntity tblUserRoleMasterEntity = tblUserRoleMasterEntityFactoryForTest.newTblUserRoleMasterEntity();
		when(tblUserRoleMasterPersistenceJPA.load(tblUserRoleMaster.getUserRoleId())).thenReturn(tblUserRoleMasterEntity);
		
		TblUserRoleMasterEntity tblUserRoleMasterEntitySaved = tblUserRoleMasterEntityFactoryForTest.newTblUserRoleMasterEntity();
		when(tblUserRoleMasterPersistenceJPA.save(tblUserRoleMasterEntity)).thenReturn(tblUserRoleMasterEntitySaved);
		
		TblUserRoleMaster tblUserRoleMasterSaved = tblUserRoleMasterFactoryForTest.newTblUserRoleMaster();
		when(tblUserRoleMasterServiceMapper.mapTblUserRoleMasterEntityToTblUserRoleMaster(tblUserRoleMasterEntitySaved)).thenReturn(tblUserRoleMasterSaved);

		// When
		TblUserRoleMaster tblUserRoleMasterResult = tblUserRoleMasterService.update(tblUserRoleMaster);

		// Then
		verify(tblUserRoleMasterServiceMapper).mapTblUserRoleMasterToTblUserRoleMasterEntity(tblUserRoleMaster, tblUserRoleMasterEntity);
		assertTrue(tblUserRoleMasterResult == tblUserRoleMasterSaved);
	}

	@Test
	public void delete() {
		// Given
		String userRoleId = mockValues.nextString(100);

		// When
		tblUserRoleMasterService.delete(userRoleId);

		// Then
		verify(tblUserRoleMasterPersistenceJPA).delete(userRoleId);
		
	}

}
