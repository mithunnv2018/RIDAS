/*
 * Created on 29 Feb 2016 ( Time 17:46:20 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.ridas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.ridas.bean.TblPlotMaster;
import com.ridas.bean.jpa.TblPlotMasterEntity;
import java.util.Date;
import java.util.List;
import com.ridas.business.service.mapping.TblPlotMasterServiceMapper;
import com.ridas.persistence.services.jpa.TblPlotMasterPersistenceJPA;
import com.ridas.test.TblPlotMasterFactoryForTest;
import com.ridas.test.TblPlotMasterEntityFactoryForTest;
import com.ridas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TblPlotMasterService
 */
@RunWith(MockitoJUnitRunner.class)
public class TblPlotMasterServiceImplTest {

	@InjectMocks
	private TblPlotMasterServiceImpl tblPlotMasterService;
	@Mock
	private TblPlotMasterPersistenceJPA tblPlotMasterPersistenceJPA;
	@Mock
	private TblPlotMasterServiceMapper tblPlotMasterServiceMapper;
	
	private TblPlotMasterFactoryForTest tblPlotMasterFactoryForTest = new TblPlotMasterFactoryForTest();

	private TblPlotMasterEntityFactoryForTest tblPlotMasterEntityFactoryForTest = new TblPlotMasterEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer plotPk = mockValues.nextInteger();
		
		TblPlotMasterEntity tblPlotMasterEntity = tblPlotMasterPersistenceJPA.load(plotPk);
		
		TblPlotMaster tblPlotMaster = tblPlotMasterFactoryForTest.newTblPlotMaster();
		when(tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntity)).thenReturn(tblPlotMaster);

		// When
		TblPlotMaster tblPlotMasterFound = tblPlotMasterService.findById(plotPk);

		// Then
		assertEquals(tblPlotMaster.getPlotPk(),tblPlotMasterFound.getPlotPk());
	}

	@Test
	public void findAll() {
		// Given
		List<TblPlotMasterEntity> tblPlotMasterEntitys = new ArrayList<TblPlotMasterEntity>();
		TblPlotMasterEntity tblPlotMasterEntity1 = tblPlotMasterEntityFactoryForTest.newTblPlotMasterEntity();
		tblPlotMasterEntitys.add(tblPlotMasterEntity1);
		TblPlotMasterEntity tblPlotMasterEntity2 = tblPlotMasterEntityFactoryForTest.newTblPlotMasterEntity();
		tblPlotMasterEntitys.add(tblPlotMasterEntity2);
		when(tblPlotMasterPersistenceJPA.loadAll()).thenReturn(tblPlotMasterEntitys);
		
		TblPlotMaster tblPlotMaster1 = tblPlotMasterFactoryForTest.newTblPlotMaster();
		when(tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntity1)).thenReturn(tblPlotMaster1);
		TblPlotMaster tblPlotMaster2 = tblPlotMasterFactoryForTest.newTblPlotMaster();
		when(tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntity2)).thenReturn(tblPlotMaster2);

		// When
		List<TblPlotMaster> tblPlotMastersFounds = tblPlotMasterService.findAll();

		// Then
		assertTrue(tblPlotMaster1 == tblPlotMastersFounds.get(0));
		assertTrue(tblPlotMaster2 == tblPlotMastersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TblPlotMaster tblPlotMaster = tblPlotMasterFactoryForTest.newTblPlotMaster();

		TblPlotMasterEntity tblPlotMasterEntity = tblPlotMasterEntityFactoryForTest.newTblPlotMasterEntity();
		when(tblPlotMasterPersistenceJPA.load(tblPlotMaster.getPlotPk())).thenReturn(null);
		
		tblPlotMasterEntity = new TblPlotMasterEntity();
		tblPlotMasterServiceMapper.mapTblPlotMasterToTblPlotMasterEntity(tblPlotMaster, tblPlotMasterEntity);
		TblPlotMasterEntity tblPlotMasterEntitySaved = tblPlotMasterPersistenceJPA.save(tblPlotMasterEntity);
		
		TblPlotMaster tblPlotMasterSaved = tblPlotMasterFactoryForTest.newTblPlotMaster();
		when(tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntitySaved)).thenReturn(tblPlotMasterSaved);

		// When
		TblPlotMaster tblPlotMasterResult = tblPlotMasterService.create(tblPlotMaster);

		// Then
		assertTrue(tblPlotMasterResult == tblPlotMasterSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TblPlotMaster tblPlotMaster = tblPlotMasterFactoryForTest.newTblPlotMaster();

		TblPlotMasterEntity tblPlotMasterEntity = tblPlotMasterEntityFactoryForTest.newTblPlotMasterEntity();
		when(tblPlotMasterPersistenceJPA.load(tblPlotMaster.getPlotPk())).thenReturn(tblPlotMasterEntity);

		// When
		Exception exception = null;
		try {
			tblPlotMasterService.create(tblPlotMaster);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TblPlotMaster tblPlotMaster = tblPlotMasterFactoryForTest.newTblPlotMaster();

		TblPlotMasterEntity tblPlotMasterEntity = tblPlotMasterEntityFactoryForTest.newTblPlotMasterEntity();
		when(tblPlotMasterPersistenceJPA.load(tblPlotMaster.getPlotPk())).thenReturn(tblPlotMasterEntity);
		
		TblPlotMasterEntity tblPlotMasterEntitySaved = tblPlotMasterEntityFactoryForTest.newTblPlotMasterEntity();
		when(tblPlotMasterPersistenceJPA.save(tblPlotMasterEntity)).thenReturn(tblPlotMasterEntitySaved);
		
		TblPlotMaster tblPlotMasterSaved = tblPlotMasterFactoryForTest.newTblPlotMaster();
		when(tblPlotMasterServiceMapper.mapTblPlotMasterEntityToTblPlotMaster(tblPlotMasterEntitySaved)).thenReturn(tblPlotMasterSaved);

		// When
		TblPlotMaster tblPlotMasterResult = tblPlotMasterService.update(tblPlotMaster);

		// Then
		verify(tblPlotMasterServiceMapper).mapTblPlotMasterToTblPlotMasterEntity(tblPlotMaster, tblPlotMasterEntity);
		assertTrue(tblPlotMasterResult == tblPlotMasterSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer plotPk = mockValues.nextInteger();

		// When
		tblPlotMasterService.delete(plotPk);

		// Then
		verify(tblPlotMasterPersistenceJPA).delete(plotPk);
		
	}

}
