/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## ----------------------------------------------------------------------
#if ( $entity.hasCompositePrimaryKey() )
#set( $primaryKeyType = "${entity.name}EntityKey" )
#else 
#set( $primaryKeyType = $entity.keyAttributes[0].wrapperType )
#end
## ----------------------------------------------------------------------

package ${target.javaPackageFromFolder($SRC)};

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
#end
import ${ROOT_PKG}.persistence.commons.jpa.GenericJpaService;
import ${ROOT_PKG}.persistence.commons.jpa.JpaOperation;
import ${ROOT_PKG}.persistence.services.${entity.name}Persistence;
##-done as on 13 feb 2016 added below imports
import java.util.List;
import java.util.Date;
##-done as on 16 feb 2016 added below 2 imports.
import ${ROOT_PKG}.web.common.CustomUserDetails;
import org.springframework.security.core.context.SecurityContextHolder;

//done as on 17 feb 2016 import the related entities too.
#foreach( $link in $entity.selectedLinks )
import ${ENTITY_PKG}.jpa.${link.targetEntitySimpleType}Entity;
#end

##-- done as on 09 feb 2016 logic to check if the primary is a string or numerical
#foreach( $attribute in $entity.keyAttributes )
#if($attribute.isNumberType())
#set($pkisanumber      = "true" )
#set($pkmyfieldtype = $attribute.fullType)

#else
#set($pkisanumber      = "false" )
#end
#end


/**
 * JPA implementation for basic persistence operations ( entity "${entity.name}" )
 * 
 * @author Telosys Tools Generator
 *
 */
public class ${entity.name}PersistenceJPA extends GenericJpaService<${entity.name}Entity, $primaryKeyType> implements ${entity.name}Persistence {

	/**
	 * Constructor
	 */
	public ${entity.name}PersistenceJPA() {
		super(${entity.name}Entity.class);
	}

	@Override
	public ${entity.name}Entity load( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
		return super.load( key );
#else
		return super.load( $fn.argumentsList( $entity.keyAttributes ) );
#end	
	}

	@Override
	public boolean delete( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
	// done as on 17 feb 2016 commented below logic of deleting to dormant by new method above for making the dormant fields for related entities
		return deleteRelationships($fn.argumentsList( $entity.keyAttributes ));
##-- done as on 17 feb 2016 commented below logic of deleting to dormant by new method above for making the dormant fields for related entities
##--#if ( $entity.hasCompositePrimaryKey() )
##--		// Build the composite key
##--		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
##--		return super.delete( key ,"$fn.argumentsList( $entity.keyAttributes )");

##--#else
##--		return super.delete( $fn.argumentsList( $entity.keyAttributes ),"$fn.argumentsList( $entity.keyAttributes )" );
##--#end	
	}

	@Override
	public boolean delete(${entity.name}Entity entity) {
		if ( entity != null ) {
		// done as on 17 feb 2016 commented below logic of deleting to dormant by new method above for making the dormant fields for related entities
			return deleteRelationships($fn.argumentsListWithGetter( "entity", $entity.keyAttributes ));
##-- done as on 17 feb 2016 commented below logic of deleting to dormant by new method above for making the dormant fields for related entities
##--#if ( $entity.hasCompositePrimaryKey() )
##--			// Build the composite key
##--			$primaryKeyType key = new $primaryKeyType( $fn.argumentsListWithGetter( "entity", $entity.keyAttributes ) );
##--			return super.delete( key ,"$fn.argumentsList( $entity.keyAttributes )");
##--#else
##--			return super.delete( $fn.argumentsListWithGetter( "entity", $entity.keyAttributes ) ,"$fn.argumentsList( $entity.keyAttributes )");
##--#end	
		}
		return false ;
	}

  /** done as on 17 feb 2016 delete the OnetoMany and OneToOne relations to dormant.
	*
	*/	
  private boolean deleteRelationships(final $primaryKeyType pk)
  {
    JpaOperation operation = new JpaOperation() {
    @Override
   	public Object exectue(EntityManager em) throws PersistenceException {
    	final ${entity.name}Entity entity = em.find(${entity.name}Entity.class, pk);
    	/*String entityname=TblSectorMasterEntity.class.getName();*/
    	entity.setStatus("dormant");
    	em.merge(entity);

#foreach( $link in $entity.selectedLinks )
#if ( $link.isCardinalityOneToMany() )
		
 
		List<${link.targetEntitySimpleType}Entity> ${link.targetEntitySimpleType}list=entity.${link.getter}();
		for(int i=0;i<${link.targetEntitySimpleType}list.size();i++)
		{
			${link.targetEntitySimpleType}Entity obj= ${link.targetEntitySimpleType}list.get(i);
			obj.setStatus("dormant");
			em.merge(obj);
		}
 
#end
#if ( $link.isCardinalityOneToOne() )
		
		${link.targetEntitySimpleType}Entity obj=entity.${link.getter}();
		obj.setStatus("dormant");
		em.merge(obj);
#end
#end

	    if (entity!=null) {
    			 //em.remove(entity);
     			return Boolean.TRUE ;
    		}
    		else {
     			return Boolean.FALSE ;
    		}
   		}
	  } ;
	  // JPA operation execution 
	  Boolean b = (Boolean) execute(operation, true) ;
	  return b.booleanValue();
 	}


	@Override
	public long countAll() {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				Query query = em.createNamedQuery("${entity.name}Entity.countAll");
				return query.getSingleResult() ;
			}
		} ;
		// JPA operation execution 
		return (Long) execute(operation);
	}

 	/**
	 * Save the given entity ( TRANSACTIONAL )
	 * @param ${entity.name}Entity
	 * 
	 * @return
	 */
	@Override
	public ${entity.name}Entity save(final ${entity.name}Entity entityToSave) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {

				Boolean isnew=false;

//done as on 10 feb 2016 add condition to check if the table has auto increment if so hide the logic of manual key geenration.
#if($entity.hasAutoIncrementedKey() == false)
				
//done as on 09 feb 2016 logic to check if this is an update or savenew call.
#if($pkisanumber=="true")
				$pkmyfieldtype DUMMY=new $pkmyfieldtype(0+"");
				if(entityToSave.get$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})().equals(DUMMY))
				{
					isnew=true;
#else
				if(entityToSave.get$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})().equals("temp"))
				{
					isnew=true;
#end		
				
				}
				else
				{
					isnew=false;
				}	
				if(isnew==true)
				{
					TypedQuery<${entity.name}Entity> query = em.createQuery("select t from ${entity.name}Entity t where t.countpk in (SELECT max(t2.countpk) from ${entity.name}Entity t2)",${entity.name}Entity.class);
					${entity.name}Entity q=query.getSingleResult();
					Long maxpk=q.getCountpk();
					String prefix=q.getPrefixcolumn();
					++maxpk;
					String pkstring=prefix+maxpk;
//done as on 09 feb 2016 logic to check if the priamry is a string or numerical
#if($pkisanumber=="true")
			
					$pkmyfieldtype mypk=new $pkmyfieldtype(maxpk+"");
					entityToSave.set$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})(mypk);
				
#else
					entityToSave.set$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})(pkstring);
#end			
					entityToSave.setPrefixcolumn(prefix);
					entityToSave.setCountpk(maxpk);
					//done as on 16 feb 2016 to save create date on save 	
					 entityToSave.setCreateDate(new Date());
	
				}

#else //else of check if table has auto increment.
#if($pkisanumber=="true")
				$pkmyfieldtype DUMMY=new $pkmyfieldtype(0+"");
				if(entityToSave.get$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})().equals(DUMMY))
				{
					isnew=true;
					entityToSave.setCreateDate(new Date());
#else
				if(entityToSave.get$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})().equals("temp"))
				{
					isnew=true;
					entityToSave.setCreateDate(new Date());
#end		
				
				}
				else
				{
					isnew=false;
				}
				

//end of check if table has auto increment.
#end
				//done as on 16 feb 2016 to save create date on save
				entityToSave.setStatus("active");
	    		CustomUserDetails userDetails =
       				(CustomUserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();

				entityToSave.setUserId(userDetails.getUserid());

    			entityToSave.setModifiedDate(new Date());
			
				${entity.name}Entity managedEntity = em.merge(entityToSave);
				return managedEntity;
			}
		} ;
		// JPA operation execution 
		return (${entity.name}Entity) execute(operation, true) ;
	}
/**
	 * 	done as on 13 feb 2016 added for TblUserMaster for retrieving user details for login
    */
#if(${entity.name}=="TblUserMaster")
	 @Override
  public List<TblUserMasterEntity> getUser(final String username) {
  	// JPA operation definition 
  	JpaOperation operation = new JpaOperation() {
   	@Override
   	public Object exectue(EntityManager em) throws PersistenceException {
     	Query query = em.createQuery("SELECT e FROM TblUserMasterEntity e where e.userName=:username and e.status='active' ");
     	query.setParameter("username", username);
     
    	return query.getResultList();
   	}
  		} ;
  	// JPA operation execution 
  	return (List<TblUserMasterEntity>) execute(operation,true) ;
 	}
#end		
}
