## #set( $tools = $loader.newInstance("Tools") )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
#set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
## --- Primary Key Path Variables, e.g. "@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathVariable(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
## // ${DOLLAR}pkPath          = "$pkPath"
## // ${DOLLAR}pkPathVariables = "$pkPathVariables"
##
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
## #set( $referencedEntities = $tools.referencedEntityTypes($entity, $entity.attributes) )## All referenced entities (PK and NON PK)
## #set( $referencedNonPKEntities = $tools.referencedEntityTypes($entity, $entity.nonKeyAttributes) )## Entities referenced by NON PK fields
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and NON PK)
#set( $referencedNonPKEntities = $entity.referencedEntityTypes($entity.nonKeyAttributes) )## Entities referenced by NON PK fields

#set( $fileuploadexists = "false" )
#foreach( $attribute in $entity.nonKeyAttributes )
#if( $attribute.name=="fileurl" )
#set( $fileuploadexists = "true" )
#else

#end
#end

##-- done as on 9 feb 2016 addef check to see if the primarykey is numeric or not.
#foreach( $attribute in $entity.keyAttributes )
				
#if($attribute.isNumberType())
#set($pkisanumber      = "true" )
#set($pkmyfieldtype = $attribute.fullType)

#else
#set($pkisanumber      = "false" )
#end
#end

## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

#if ( $referencedEntities.size() > 0 )
import java.util.LinkedList;
#end
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
//done as on 2 feb 2016
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;
import java.io.File;

//--- Common classes
import ${ROOT_PKG}.web.common.AbstractController;
import ${ROOT_PKG}.web.common.FormMode;
import ${ROOT_PKG}.web.common.Message;
import ${ROOT_PKG}.web.common.MessageType;

//--- Entities
import ${ENTITY_PKG}.${entity.name};
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same entity
import ${ENTITY_PKG}.$ref;
#end
#end

//--- Services 
import ${ROOT_PKG}.business.service.${entity.name}Service;
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
import ${ROOT_PKG}.business.service.${ref}Service;
#end
#end

#if ( $referencedEntities.size() > 0 )
//--- List Items 
#end
#foreach( $ref in $referencedEntities )
import ${ROOT_PKG}.web.listitem.${ref}ListItem;
#end

/**
 * Spring MVC controller for '${entity.name}' management.
 */
@Controller
@RequestMapping("/$uncapitalizedEntityName")
public class ${entity.name}Controller extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "${uncapitalizedEntityName}";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "${uncapitalizedEntityName}/form";
	private static final String JSP_LIST   = "${uncapitalizedEntityName}/list";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/${uncapitalizedEntityName}/create";
	private static final String SAVE_ACTION_UPDATE   = "/${uncapitalizedEntityName}/update";

	//--done as on 19 feb 2016 to import CSV FILE Logic
	private static final String XLS_ACTION_UPLOAD = "fileImportAction";
	private static final String XLS_ACTION_UPLOAD_URL = "/${uncapitalizedEntityName}/csvimport";
	private static final String JSP_SHOW_IMPORT_PAGE = "${uncapitalizedEntityName}/fileimport";
	
	//--- Main entity service
	@Resource
    private ${entity.name}Service ${uncapitalizedEntityName}Service; // Injected by Spring
	//--- Other service(s)
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple declarations for the same service
	@Resource
    private ${ref}Service ${fn.uncapitalize(${ref})}Service; // Injected by Spring
#end
#end

	//done as on 2 feb 2016
	static final String folderName="${entity.name}";
	private MultipartFile file2=null;
//done as on 19 feb 2016 added logic for csv file import
	private MultipartFile fileimport2 = null;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ${entity.name}Controller() {
		super(${entity.name}Controller.class, MAIN_ENTITY_NAME );
		log("${entity.name}Controller created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------
#foreach( $ref in $referencedEntities )
	/**
	 * Populates the combo-box "items" for the referenced entity "$ref"
	 * @param model
	 */
	private void populateListOf${ref}Items(Model model) {
		List<${ref}> list = ${fn.uncapitalize(${ref})}Service.findAll();
		List<${ref}ListItem> items = new LinkedList<${ref}ListItem>();
		for ( ${ref} $fn.uncapitalize(${ref}) : list ) {
			items.add(new ${ref}ListItem( $fn.uncapitalize(${ref}) ) );
		}
		model.addAttribute("listOf${ref}Items", items ) ;
	}

#end

	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param $uncapitalizedEntityName
	 */
	private void populateModel(Model model, ${entity.name} $uncapitalizedEntityName, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, $uncapitalizedEntityName);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
#foreach( $ref in $referencedEntities )
			populateListOf${ref}Items(model);
#end
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
#foreach( $ref in $referencedNonPKEntities )
			populateListOf${ref}Items(model);
#end
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of ${entity.name} found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(Model model) {
		log("Action 'list'");
		List<${entity.name}> list = ${uncapitalizedEntityName}Service.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);		
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new ${entity.name}
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		${entity.name} ${uncapitalizedEntityName} = new ${entity.name}();	
##-- done as on 10 feb 2016 commmented belod 4 lines and added new feature below that
##--- ---- done as on 06 feb 2016 logic to put default 0 for primarykey when creating new field. 
##--if(${entity.hasAutoIncrementedKey()})		
##--set( $mypk2 = $fn.argumentsList($entity.keyAttributes) )
##--		${uncapitalizedEntityName}.set$fn.capitalize(${mypk2})(0);
##--end

// done as on 10 feb 2016  save primary key default to temp
#if($pkisanumber=="true")
				$pkmyfieldtype DUMMY=new $pkmyfieldtype(0+"");
#else
				String DUMMY="temp";
#end
		${uncapitalizedEntityName}.set$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})(DUMMY);

		populateModel( model, ${uncapitalizedEntityName}, FormMode.CREATE);


		//done as on 2 feb 2016
#if($fileuploadexists=="true")		
		model.addAttribute("file2", file2);		
#end
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing ${entity.name}
	 * @param model Spring MVC model
#foreach( $attribute in $entity.keyAttributes )
	 * @param $attribute.name  primary key element
#end
	 * @return
	 */
	@RequestMapping(value = "/form/${pkPath}")
	public String formForUpdate(Model model, ${pkPathVariables} ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		${entity.name} ${uncapitalizedEntityName} = ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
		populateModel( model, ${uncapitalizedEntityName}, FormMode.UPDATE);		
		return JSP_FORM;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param ${uncapitalizedEntityName}  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(@Valid ${entity.name} ${uncapitalizedEntityName}, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) {
		//done as on 2 feb 2016
		//ADD PARAMS HttpServletResponse httpServletResponse

		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {

				
#if($fileuploadexists=="true")				
				//done as on 2 feb 2016
				//ADD BELOW CODE TO METHOD

				file2=(MultipartFile) ((DefaultMultipartHttpServletRequest)httpServletRequest).getFile("file2");
				if(file2.isEmpty()==false)
				{
					String imagePathForSave = super.getImagePathForSave(httpServletRequest, httpServletResponse, folderName);
					String productPdfFileName = file2.getOriginalFilename();
					File file = new File(imagePathForSave+ file2.getOriginalFilename());
					file2.transferTo(file);	
					String contenttype=file2.getContentType();
	
					${uncapitalizedEntityName}.setFileurl(file.toString());
					//tblProductMaster.setFileName(productPdfFileName);

					//done as on 17 feb 2016 additonal fields for FILE Upload
					${uncapitalizedEntityName}.setFilename(productPdfFileName);
					${uncapitalizedEntityName}.setFilecontenttype(contenttype);
					
				}	
#end				

// done as on 06 feb 2016  save primary key default to temp
#if($pkisanumber=="true")
				$pkmyfieldtype DUMMY=new $pkmyfieldtype(0+"");
#else
				String DUMMY="temp";
#end

				${uncapitalizedEntityName}.set$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})(DUMMY);

				${entity.name} ${uncapitalizedEntityName}Created = ${uncapitalizedEntityName}Service.create(${uncapitalizedEntityName}); 
				model.addAttribute(MAIN_ENTITY_NAME, ${uncapitalizedEntityName}Created);

				
				//---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				// done as on 06 feb 2016  introduced a new getter for getting the primary key of the newly created Bean coming after saved.
#set( $mynewcreated = $fn.argumentsListWithGetter("${uncapitalizedEntityName}Created", $entity.keyAttributes) )
				return redirectToForm(httpServletRequest, $mynewcreated );
				//return redirectToForm(httpServletRequest, $pkElementsGetters );
			} else {
				populateModel( model, ${uncapitalizedEntityName}, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "${uncapitalizedEntityName}.error.create", e);
			populateModel( model, ${uncapitalizedEntityName}, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param ${uncapitalizedEntityName}  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update" ) // GET or POST
	public String update(@Valid ${entity.name} ${uncapitalizedEntityName}, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) {
	//done as on 2 feb 2016
	//ADD PARAMS HttpServletResponse httpServletResponse
		
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {

#if($fileuploadexists=="true")				
				//done as on 2 feb 2016
				//ADDED BELOW IF ELSE CONDITION 				
				 
				file2=(MultipartFile) ((DefaultMultipartHttpServletRequest)httpServletRequest).getFile("file2");
				if(file2.isEmpty()==false)
				{
					String imagePathForSave = super.getImagePathForSave(httpServletRequest, httpServletResponse, folderName);
					String productPdfFileName = file2.getOriginalFilename();
					String contenttype=file2.getContentType();
	
				
					File file = new File(imagePathForSave+ file2.getOriginalFilename());
					
					file2.transferTo(file);
				
					${uncapitalizedEntityName}.setFileurl(file.toString());
					//${uncapitalizedEntityName}.setProductPdfFileName(productPdfFileName);
					//done as on 17 feb 2016 additonal fields for FILE Upload
					${uncapitalizedEntityName}.setFilename(productPdfFileName);
					${uncapitalizedEntityName}.setFilecontenttype(contenttype);
					

					//--- Perform database operations
					${entity.name} ${uncapitalizedEntityName}Saved = ${uncapitalizedEntityName}Service.update(${uncapitalizedEntityName});
					model.addAttribute(MAIN_ENTITY_NAME, ${uncapitalizedEntityName}Saved);
					//--- Set the result message
					messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
					log("Action 'update' : update done - redirect");
					return redirectToForm(httpServletRequest, $pkElementsGetters);
				 }	
				 else
				 {
#end				
				
				//--- Perform database operations
				${entity.name} ${uncapitalizedEntityName}Saved = ${uncapitalizedEntityName}Service.update(${uncapitalizedEntityName});
				model.addAttribute(MAIN_ENTITY_NAME, ${uncapitalizedEntityName}Saved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, $pkElementsGetters);
			
				
#if($fileuploadexists=="true")
				//done as on 2 feb 2016
					}
#end
				
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, ${uncapitalizedEntityName}, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "${uncapitalizedEntityName}.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, ${uncapitalizedEntityName}, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
#foreach( $attribute in $entity.keyAttributes )
	 * @param $attribute.name  primary key element
#end
	 * @return
	 */
	@RequestMapping(value = "/delete/${pkPath}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, ${pkPathVariables}) {
		log("Action 'delete'" );
		try {
			${uncapitalizedEntityName}Service.delete( ${pkElementsVariables} );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "${uncapitalizedEntityName}.error.delete", e);
		}
		return redirectToList();
	}

	@RequestMapping("/formforcsvimport2")
	public String formForExcelImport(Model model) {
		log("Action 'formforexcelimport'");
		// --- Populates the model with a new instance
		${entity.name} ${uncapitalizedEntityName} = new ${entity.name}();

		// done as on 19 feb 2016  save primary key default to temp
#if($pkisanumber=="true")
				$pkmyfieldtype DUMMY=new $pkmyfieldtype(0+"");
#else
				String DUMMY="temp";
#end

		${uncapitalizedEntityName}.set$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})(DUMMY);


		model.addAttribute("fileimport2", fileimport2);
		 
		model.addAttribute(XLS_ACTION_UPLOAD, XLS_ACTION_UPLOAD_URL);

		// done as on 2 feb 2016
		return JSP_SHOW_IMPORT_PAGE;
	}

	@RequestMapping("/csvimport")
	public String excelimport(${entity.name} ${uncapitalizedEntityName}, BindingResult bindingResult, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest,
			HttpServletResponse httpServletResponse) {
		 
		log("Action 'csvuploading'");
		try {
			if (!bindingResult.hasErrors()) {

				 
				file2 = (MultipartFile) ((DefaultMultipartHttpServletRequest) httpServletRequest).getFile("fileimport2");
				if (file2.isEmpty() == false) {
 					String productPdfFileName = file2.getOriginalFilename();
					 
 					String contenttype = file2.getContentType();
 					
 					${uncapitalizedEntityName}Service.doImportExcelSpreadSheet(file2);	
 
				}
			}
		} catch (Exception e) {
			log("Action 'CSVImport' : Exception - " + e.getMessage());
			messageHelper.addException(model, "${uncapitalizedEntityName}.error.create", e);	
		}
		return "redirect:/"+MAIN_ENTITY_NAME;
	}
}
