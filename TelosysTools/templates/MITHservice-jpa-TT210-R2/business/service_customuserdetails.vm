/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${SRC})};

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import ${ENTITY_PKG}.TblUserMaster;
import ${ENTITY_PKG}.jpa.TblUserMasterEntity;
import ${ENTITY_PKG}.jpa.TblUserRoleDetailsEntity;
import ${ROOT_PKG}.business.service.TblUserMasterService;
import ${ROOT_PKG}.business.service.mapping.TblUserMasterServiceMapper;

import org.modelmapper.ModelMapper;
##-done as on 16 feb 2016 added below 2 imports.
import ${ROOT_PKG}.web.common.CustomUserDetails;
import org.springframework.security.core.context.SecurityContextHolder;

/**
 * Method to Login Service for Spring Security.
 */
@Component
public class CustomUserDetailsService implements UserDetailsService  {


 	@Resource
 	private TblUserMasterService tblUserMasterService;
  
 	//private  TblUserMasterPersistence tblUserMasterPersistence;
 
	@Resource
 	private TblUserMasterServiceMapper tblUserMasterServiceMapper;
 
	@Override
 	public UserDetails loadUserByUsername(String username2) throws UsernameNotFoundException {
  
   		List<TblUserMasterEntity> user = tblUserMasterService.getUser(username2);
   		TblUserMasterEntity tblUserMasterEntity = user.get(0);
		TblUserMaster tblUserMaster =new TblUserMaster();

		//done as on 16 feb 2016 retireved the UserId of logging in user.
		String userid=tblUserMasterEntity.getUserIdPk();
   
   		tblUserMaster=tblUserMasterServiceMapper.mapTblUserMasterEntityToTblUserMaster(tblUserMasterEntity);
   
   		boolean enabled=true;
   
  		String username=tblUserMasterEntity.getUserName();
  		String password=tblUserMasterEntity.getUserPassword();
  		boolean accountNonExpired=true;
  		boolean credentialsNonExpired=true;
  		boolean accountNonLocked=true;
  		Collection<? extends GrantedAuthority> authorities=getAuthorities(tblUserMasterEntity.getListOfTblUserRoleDetails());

  		//return new User(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);
		//done as on 16 feb 2016 saving the UserId of logging in user.
		return new CustomUserDetails(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities,userid);
   
 	}
 
 	public Collection<? extends GrantedAuthority> getAuthorities(List<TblUserRoleDetailsEntity> list)
 	{
  		List<GrantedAuthority> authorities=new ArrayList<GrantedAuthority>();
  
  		for (TblUserRoleDetailsEntity tblUserRoleDetailsEntity : list) {
   
   			String userRoleName = tblUserRoleDetailsEntity.getTblUserRoleMaster().getUserRoleName();
   			authorities.add(new SimpleGrantedAuthority(userRoleName));
  		}
  
  		return authorities;
 	}	
}
