/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder(${SRC})};

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import ${ENTITY_PKG}.${entity.name};
import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#if( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
#end
#foreach( $import in $java.imports($entity) )
import $import;
#end
import ${ROOT_PKG}.business.service.${entity.name}Service;
import ${ROOT_PKG}.business.service.mapping.${entity.name}ServiceMapper;
import ${ROOT_PKG}.persistence.PersistenceServiceProvider;
import ${ROOT_PKG}.persistence.services.${entity.name}Persistence;
import org.springframework.stereotype.Component;

//done as on 19 feb 2016 import below
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
//done as on 22 feb 2016 import of supercsv
import org.supercsv.cellprocessor.ParseBigDecimal;
import org.supercsv.cellprocessor.ParseBool;
import org.supercsv.cellprocessor.ParseChar;
import org.supercsv.cellprocessor.ParseDate;
import org.supercsv.cellprocessor.ParseDouble;
import org.supercsv.cellprocessor.ParseInt;
import org.supercsv.cellprocessor.ParseLong;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;



import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.supercsv.cellprocessor.ParseDate;
import org.supercsv.cellprocessor.ParseDouble;
import org.supercsv.cellprocessor.ParseLong;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;
import org.springframework.web.multipart.MultipartFile;
##-- done as on 19 feb 2016 addef check to see if the primarykey is numeric or not.
#foreach( $attribute in $entity.keyAttributes )
				
#if($attribute.isNumberType())
#set($pkisanumber      = "true" )
#set($pkmyfieldtype = $attribute.fullType)

#else
#set($pkisanumber      = "false" )
#end
#end
/**
 * Implementation of ${entity.name}Service
 */
@Component
public class ${entity.name}ServiceImpl implements ${entity.name}Service {

	private ${entity.name}Persistence ${fn.uncapitalize($entity.name)}Persistence;

	@Resource
	private ${entity.name}ServiceMapper ${fn.uncapitalize($entity.name)}ServiceMapper;
	
	public ${entity.name}ServiceImpl() {
		${fn.uncapitalize($entity.name)}Persistence = PersistenceServiceProvider.getService(${entity.name}Persistence.class);
	}
		
	@Override
	public ${entity.name} findById($fn.argumentsListWithType($entity.keyAttributes)) {
		${entity.name}Entity entity = ${fn.uncapitalize($entity.name)}Persistence.load($fn.argumentsList($entity.keyAttributes));
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(entity);
	}

	@Override
	public List<${entity.name}> findAll() {
		List<${entity.name}Entity> entities = ${fn.uncapitalize($entity.name)}Persistence.loadAll();
		List<${entity.name}> beans = new ArrayList<${entity.name}>();
		for(${entity.name}Entity entity : entities) {
			beans.add(${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(entity));
		}
		return beans;
	}

	@Override
	public ${entity.name} save(${entity.name} ${fn.uncapitalize($entity.name)}) {
		return update(${fn.uncapitalize($entity.name)}) ;
	}

	@Override
	public ${entity.name} create(${entity.name} ${fn.uncapitalize($entity.name)}) {
		if(${fn.uncapitalize($entity.name)}Persistence.load($fn.argumentsListWithGetter(${fn.uncapitalize($entity.name)},$entity.keyAttributes)) != null) {
			throw new IllegalStateException("already.exists");
		}
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = new ${entity.name}Entity();

	 	
		
		${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
	 	
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}Persistence.save(${fn.uncapitalize($entity.name)}Entity);
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved);
	}

	@Override
	public ${entity.name} update(${entity.name} ${fn.uncapitalize($entity.name)}) {
		${entity.name}Entity ${fn.uncapitalize($entity.name)}Entity = ${fn.uncapitalize($entity.name)}Persistence.load($fn.argumentsListWithGetter(${fn.uncapitalize($entity.name)},$entity.keyAttributes));
		${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}To${entity.name}Entity(${fn.uncapitalize($entity.name)}, ${fn.uncapitalize($entity.name)}Entity);
		${entity.name}Entity ${fn.uncapitalize($entity.name)}EntitySaved = ${fn.uncapitalize($entity.name)}Persistence.save(${fn.uncapitalize($entity.name)}Entity);
		return ${fn.uncapitalize($entity.name)}ServiceMapper.map${entity.name}EntityTo${entity.name}(${fn.uncapitalize($entity.name)}EntitySaved);
	}

	@Override
	public void delete($fn.argumentsListWithType($entity.keyAttributes)) {
		${fn.uncapitalize($entity.name)}Persistence.delete($fn.argumentsList($entity.keyAttributes));
	}

	public ${entity.name}Persistence get${entity.name}Persistence() {
		return ${fn.uncapitalize($entity.name)}Persistence;
	}

	public void set${entity.name}Persistence(${entity.name}Persistence ${fn.uncapitalize($entity.name)}Persistence) {
		this.${fn.uncapitalize($entity.name)}Persistence = ${fn.uncapitalize($entity.name)}Persistence;
	}

	public ${entity.name}ServiceMapper get${entity.name}ServiceMapper() {
		return ${fn.uncapitalize($entity.name)}ServiceMapper;
	}

	public void set${entity.name}ServiceMapper(${entity.name}ServiceMapper ${fn.uncapitalize($entity.name)}ServiceMapper) {
		this.${fn.uncapitalize($entity.name)}ServiceMapper = ${fn.uncapitalize($entity.name)}ServiceMapper;
	}

/**
	* 	done as on 13 feb 2016 added for TblUserMaster for retrieving user details for login
    */
#if(${entity.name}=="TblUserMaster")
	  
 	@Override
 	public List<TblUserMasterEntity> getUser(  String username) {
  		return tblUserMasterPersistence.getUser(username);
 	}
#end

	@Override
	public Boolean doImportExcelSpreadSheet(MultipartFile file) throws IOException {
		
		ICsvBeanReader beanReader = null;
		try
		{
##--done as on 22-feb-2016  code to remove unwanted fields from list
#set($mylist=[])##
#set($mycount=0)##
#foreach( $attribute in $entity.nonKeyAttributes )## 
#if($attribute.name=="countpk" || $attribute.name=="createDate" || $attribute.name=="modifiedDate" || $attribute.name=="status" || $attribute.name=="prefixcolumn" || $attribute.name=="userId" )##
#else##
#set($succ=$mylist.add($attribute))##
#set($mycount=$mycount+1)##
#end
#end
//done as on 22-feb-2016  code to remove unwanted fields from list

			beanReader = new CsvBeanReader(new InputStreamReader(file.getInputStream()),
					CsvPreference.STANDARD_PREFERENCE);
			final String[] header = beanReader.getHeader(true);
			final CellProcessor[] processors = new CellProcessor[] { 
#foreach($attribute in $mylist)##
#if($attribute.isBigDecimalType())##
					new ParseBigDecimal()##
#elseif($attribute.isBooleanType())##
					new ParseBool()##
#elseif($attribute.isStringType())##
					new NotNull()##
#elseif($attribute.isSqlDateType())##
					new ParseDate("MM/dd/yyyy")##
#elseif($attribute.isTemporalType())##
					new ParseDate("MM/dd/yyyy")##
					
#elseif($attribute.isDoubleType())##
					new ParseDouble()##
#elseif($attribute.isIntegerType())##
					new ParseInt()##
#elseif($attribute.isLongType())##
					new ParseLong()##
#else##
					new NotNull()##
#end##			

#if($foreach.hasNext)
					,##
#end##

#end##
			};

			${entity.name} ${fn.uncapitalize($entity.name)}=new ${entity.name}();
			while((${fn.uncapitalize($entity.name)}=beanReader.read(${entity.name}.class, header,processors))!=null){

		
		 
			
			// done as on 19 feb 2016  save primary key default to temp
#if($pkisanumber=="true")
				$pkmyfieldtype DUMMY=new $pkmyfieldtype(0+"");
#else
				String DUMMY="temp";
#end

				${fn.uncapitalize($entity.name)}.set$fn.capitalize(${fn.argumentsList($entity.keyAttributes)})(DUMMY);

			 	create(${fn.uncapitalize($entity.name)});
			}
		}
		finally
		{
			if( beanReader != null ) {
                beanReader.close();
        	}
		}
		return true;
	}
}
